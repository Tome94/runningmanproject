{"ast":null,"code":"const initialState = [{\n  id: 0,\n  contents: '',\n  visible: true,\n  matched: true,\n  teamMatch: 0\n}, {\n  id: 1,\n  contents: '',\n  visible: true,\n  matched: true,\n  teamMatch: 0\n}, {\n  id: 2,\n  contents: '',\n  visible: true,\n  matched: true,\n  teamMatch: 0\n}, {\n  id: 3,\n  contents: '',\n  visible: true,\n  matched: true,\n  teamMatch: 0\n}, {\n  id: 4,\n  contents: '',\n  visible: true,\n  matched: true,\n  teamMatch: 0\n}, {\n  id: 5,\n  contents: '',\n  visible: true,\n  matched: true,\n  teamMatch: 0\n}, {\n  id: 6,\n  contents: '',\n  visible: true,\n  matched: true,\n  teamMatch: 0\n}, {\n  id: 7,\n  contents: '',\n  visible: true,\n  matched: true,\n  teamMatch: 0\n}, {\n  id: 8,\n  contents: '',\n  visible: true,\n  matched: true,\n  teamMatch: 0\n}, {\n  id: 9,\n  contents: '',\n  visible: true,\n  matched: true,\n  teamMatch: 0\n}, {\n  id: 10,\n  contents: '',\n  visible: true,\n  matched: true,\n  teamMatch: 0\n}, {\n  id: 11,\n  contents: '',\n  visible: true,\n  matched: true,\n  teamMatch: 0\n}];\nexport const boardReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    case 'board/setBoard':\n      let setState = [];\n      action.payload.forEach((element, index) => setState.push({\n        id: index,\n        contents: element,\n        visible: false,\n        matched: false,\n        teamMatch: 0\n      }));\n      console.log(setState.map(card => card.contents));\n      return setState;\n    case 'board/flipCard':\n      let flipState = [...state];\n      const {\n        cardID,\n        teamID\n      } = action.payload;\n      flipState[cardID] = {\n        ...state[cardID],\n        visible: true\n      };\n      const [index1, index2] = flipState.filter(card => card.visible).map(card => card.id);\n      if (index2 !== undefined) {\n        const card1 = flipState[index1];\n        const card2 = flipState[index2];\n        if (card1.contents === card2.contents) {\n          flipState[index1] = {\n            ...card1,\n            visible: false,\n            matched: true,\n            teamMatch: teamID\n          };\n          flipState[index2] = {\n            ...card2,\n            visible: false,\n            matched: true,\n            teamMatch: teamID\n          };\n        }\n      }\n      return flipState;\n    case 'board/resetCards':\n      return state.map(card => ({\n        ...card,\n        visible: false\n      }));\n    default:\n      //console.log('Current state:', state);\n      return state;\n  }\n};\nconst wordPairs = ['Provider', 'Provider', 'selector', 'selector', 'useSelector()', 'useSelector()', 'useDispatch()', 'useDispatch()', 'Pure Function', 'Pure Function', 'react-redux', 'react-redux'];\n\n/*\nconst randomWords = () => {\n  let words = []\n  let newWordPairs = [...wordPairs]\n  const reps = newWordPairs.length\n  for (let i=0; i<reps; i++) {\n    const wordIndex = Math.floor(Math.random()*newWordPairs.length);\n    words.push(newWordPairs[wordIndex])\n    newWordPairs.splice(wordIndex, 1)\n  }\n\n  return words;\n} */\nconst nouns = ['apple', 'banana', 'car', 'dog', 'elephant', 'flower', 'guitar', 'hat', 'ice cream', 'jacket', 'key', 'lion', 'moon', 'notebook', 'orange', 'pizza', 'queen', 'rabbit', 'sun', 'tree', 'umbrella', 'violin', 'watermelon', 'xylophone', 'yogurt', 'zebra'];\nconst randomWords = () => {\n  let words = [];\n  let newNouns = [...nouns];\n  const pairs = 6; // Number of word pairs (half of the desired words count)\n  for (let i = 0; i < pairs; i++) {\n    const nounIndex = Math.floor(Math.random() * newNouns.length);\n    const noun = newNouns[nounIndex];\n    words.push(noun);\n    newNouns.splice(nounIndex, 1);\n  }\n\n  // Duplicate the words array to form matching pairs\n  words = words.concat([...words]);\n\n  // Shuffle the words array to randomize their placement\n  for (let i = words.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [words[i], words[j]] = [words[j], words[i]];\n  }\n  return words;\n};\n\n// action creators\nexport const setBoard = () => {\n  const words = randomWords();\n  return {\n    type: 'board/setBoard',\n    payload: words\n  };\n};\nexport const flipCard = (cardID, teamID) => {\n  return {\n    type: 'board/flipCard',\n    payload: {\n      cardID,\n      teamID\n    }\n  };\n};\nexport const resetCards = indices => {\n  //console.log('reseting')\n  return {\n    type: 'board/resetCards'\n  };\n};\nexport const addTeamMatch = (teamID, cardsMatched) => {\n  return {\n    type: 'board/addTeamMatch',\n    payload: {\n      teamID,\n      cardsMatched\n    }\n  };\n};\n// Add selector export statments below\nexport const selectBoard = state => state.board.map(card => ({\n  id: card.id,\n  contents: card.contents\n}));\nexport const selectVisibleIDs = state => state.board.filter(card => card.visible).map(card => card.id);\nexport const selectMatchedIDs = state => state.board.filter(card => card.matched).map(card => card.id);\nexport const selectTeamOneMatchIds = state => state.board.filter(card => card.teamMatch === 1).map(card => card.id);\nexport const selectTeamTwoMatchIds = state => state.board.filter(card => card.teamMatch === 2).map(card => card.id);","map":{"version":3,"names":["initialState","id","contents","visible","matched","teamMatch","boardReducer","state","arguments","length","undefined","action","type","setState","payload","forEach","element","index","push","console","log","map","card","flipState","cardID","teamID","index1","index2","filter","card1","card2","wordPairs","nouns","randomWords","words","newNouns","pairs","i","nounIndex","Math","floor","random","noun","splice","concat","j","setBoard","flipCard","resetCards","indices","addTeamMatch","cardsMatched","selectBoard","board","selectVisibleIDs","selectMatchedIDs","selectTeamOneMatchIds","selectTeamTwoMatchIds"],"sources":["/home/tome/lighthouse/projectG/projectg/src/pages/game/features/board/boardSlice.js"],"sourcesContent":["\nconst initialState = [\n  {id: 0, contents: '', visible: true, matched: true, teamMatch:0}, \n  {id: 1, contents: '', visible: true, matched: true, teamMatch:0}, \n  {id: 2, contents: '', visible: true, matched: true, teamMatch:0}, \n  {id: 3, contents: '', visible: true, matched: true, teamMatch:0}, \n  {id: 4, contents: '', visible: true, matched: true, teamMatch:0}, \n  {id: 5, contents: '', visible: true, matched: true, teamMatch:0}, \n  {id: 6, contents: '', visible: true, matched: true, teamMatch:0}, \n  {id: 7, contents: '', visible: true, matched: true, teamMatch:0}, \n  {id: 8, contents: '', visible: true, matched: true, teamMatch:0}, \n  {id: 9, contents: '', visible: true, matched: true, teamMatch:0}, \n  {id: 10, contents: '', visible: true, matched: true, teamMatch:0}, \n  {id: 11, contents: '', visible: true, matched: true, teamMatch:0}, \n];\nexport const boardReducer = (state = initialState, action) => {\n\n  switch (action.type) {\n    case 'board/setBoard':\n      let setState = [];\n      action.payload.forEach((element, index) => \n        setState.push({id: index, \n                      contents: element, \n                      visible: false, \n                      matched: false,\n                      teamMatch: 0})\n      );\n      console.log(setState.map(card => card.contents));\n\n      return setState;\n    case 'board/flipCard':\n      let flipState = [...state];\n      const {cardID, teamID} = action.payload;\n      flipState[cardID] = {...state[cardID], visible:true}\n      \n      const [index1, index2] = flipState\n        .filter(card => card.visible)\n        .map(card => card.id);\n      if (index2 !== undefined){\n        const card1 = flipState[index1];\n        const card2 = flipState[index2];\n        if (card1.contents === card2.contents) {\n          flipState[index1] = {...card1, visible: false, matched: true, teamMatch:teamID}\n          flipState[index2] = {...card2, visible: false, matched: true, teamMatch:teamID}\n        }\n      } \n\n      return flipState;\n      \n    case 'board/resetCards':\n      return state.map(card => ({...card, visible: false}));\n    \n    default:\n      //console.log('Current state:', state);\n      return state;\n  }\n}\n\nconst wordPairs = [\n  'Provider', 'Provider', \n  'selector', 'selector', \n  'useSelector()', 'useSelector()', \n  'useDispatch()', 'useDispatch()',\n  'Pure Function', 'Pure Function',\n  'react-redux', 'react-redux',\n]\n\n/*\nconst randomWords = () => {\n  let words = []\n  let newWordPairs = [...wordPairs]\n  const reps = newWordPairs.length\n  for (let i=0; i<reps; i++) {\n    const wordIndex = Math.floor(Math.random()*newWordPairs.length);\n    words.push(newWordPairs[wordIndex])\n    newWordPairs.splice(wordIndex, 1)\n  }\n\n  return words;\n} */\nconst nouns = [\n  'apple', 'banana', 'car', 'dog', 'elephant', 'flower', 'guitar', 'hat', 'ice cream', 'jacket', 'key', 'lion',\n  'moon', 'notebook', 'orange', 'pizza', 'queen', 'rabbit', 'sun', 'tree', 'umbrella', 'violin', 'watermelon', 'xylophone', 'yogurt', 'zebra'\n];\n\nconst randomWords = () => {\n  let words = [];\n  let newNouns = [...nouns];\n\n  const pairs = 6; // Number of word pairs (half of the desired words count)\n  for (let i = 0; i < pairs; i++) {\n    const nounIndex = Math.floor(Math.random() * newNouns.length);\n\n    const noun = newNouns[nounIndex];\n    words.push(noun);\n\n    newNouns.splice(nounIndex, 1);\n  }\n\n  // Duplicate the words array to form matching pairs\n  words = words.concat([...words]);\n\n  // Shuffle the words array to randomize their placement\n  for (let i = words.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [words[i], words[j]] = [words[j], words[i]];\n  }\n\n  return words;\n};\n\n\n\n\n// action creators\nexport const setBoard = () => {\n  const words = randomWords()\n  return {\n    type: 'board/setBoard',\n    payload: words\n  }\n}\n\nexport const flipCard = (cardID,teamID) => {\n  return {\n    type: 'board/flipCard',\n    payload: {cardID, teamID}\n  }\n}\n\nexport const resetCards = (indices) => {\n  //console.log('reseting')\n  return {\n    type: 'board/resetCards'\n  }\n}\nexport const addTeamMatch = (teamID, cardsMatched) => {\n  return {\n    type: 'board/addTeamMatch',\n    payload: { teamID, cardsMatched },\n  };\n};\n// Add selector export statments below\nexport const selectBoard = state => state.board.map(card=>({id: card.id, contents: card.contents}))\n\nexport const selectVisibleIDs = state => state.board\n.filter(card => card.visible)\n.map(card => card.id)\n\nexport const selectMatchedIDs = state => state.board\n.filter(card => card.matched)\n.map(card => card.id)\nexport const selectTeamOneMatchIds = state => state.board\n.filter(card => card.teamMatch === 1)\n.map(card => card.id)\nexport const selectTeamTwoMatchIds = state => state.board\n.filter(card => card.teamMatch === 2)\n.map(card => card.id)"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}