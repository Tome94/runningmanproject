{"ast":null,"code":"const initialState = [{\n  id: 0,\n  contents: \"\",\n  visible: true,\n  matched: true,\n  teamMatch: 0\n}, {\n  id: 1,\n  contents: \"\",\n  visible: true,\n  matched: true,\n  teamMatch: 0\n}, {\n  id: 2,\n  contents: \"\",\n  visible: true,\n  matched: true,\n  teamMatch: 0\n}, {\n  id: 3,\n  contents: \"\",\n  visible: true,\n  matched: true,\n  teamMatch: 0\n}, {\n  id: 4,\n  contents: \"\",\n  visible: true,\n  matched: true,\n  teamMatch: 0\n}, {\n  id: 5,\n  contents: \"\",\n  visible: true,\n  matched: true,\n  teamMatch: 0\n}, {\n  id: 6,\n  contents: \"\",\n  visible: true,\n  matched: true,\n  teamMatch: 0\n}, {\n  id: 7,\n  contents: \"\",\n  visible: true,\n  matched: true,\n  teamMatch: 0\n}, {\n  id: 8,\n  contents: \"\",\n  visible: true,\n  matched: true,\n  teamMatch: 0\n}, {\n  id: 9,\n  contents: \"\",\n  visible: true,\n  matched: true,\n  teamMatch: 0\n}, {\n  id: 10,\n  contents: \"\",\n  visible: true,\n  matched: true,\n  teamMatch: 0\n}, {\n  id: 11,\n  contents: \"\",\n  visible: true,\n  matched: true,\n  teamMatch: 0\n}];\nexport const boardReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    case \"board/setBoard\":\n      let setState = [];\n      action.payload.forEach((element, index) => setState.push({\n        id: index,\n        contents: element,\n        visible: false,\n        matched: false,\n        teamMatch: 0\n      }));\n      console.log(setState.map(card => card.contents));\n      return setState;\n    case \"board/flipCard\":\n      let flipState = [...state];\n      const {\n        cardID,\n        teamID\n      } = action.payload;\n      flipState[cardID] = {\n        ...state[cardID],\n        visible: true\n      };\n      const [index1, index2] = flipState.filter(card => card.visible).map(card => card.id);\n      if (index2 !== undefined) {\n        const card1 = flipState[index1];\n        const card2 = flipState[index2];\n        if (card1.contents === card2.contents) {\n          flipState[index1] = {\n            ...card1,\n            visible: false,\n            matched: true,\n            teamMatch: teamID\n          };\n          flipState[index2] = {\n            ...card2,\n            visible: false,\n            matched: true,\n            teamMatch: teamID\n          };\n        }\n      }\n      return flipState;\n    case \"board/resetCards\":\n      return state.map(card => ({\n        ...card,\n        visible: false\n      }));\n    case \"draw/displayWords\":\n      let displayState = [...state];\n      const chosenWords = action.payload;\n      for (let i = 0; i < chosenWords.length; i++) {\n        displayState[i].contents = chosenWords[i];\n      }\n      return displayState;\n    default:\n      //console.log('Current state:', state);\n      return state;\n  }\n};\n/*\nconst wordPairs = [\n  'Provider', 'Provider', \n  'selector', 'selector', \n  'useSelector()', 'useSelector()', \n  'useDispatch()', 'useDispatch()',\n  'Pure Function', 'Pure Function',\n  'react-redux', 'react-redux',\n]\n\nconst randomWords = () => {\n  let words = []\n  let newWordPairs = [...wordPairs]\n  const reps = newWordPairs.length\n  for (let i=0; i<reps; i++) {\n    const wordIndex = Math.floor(Math.random()*newWordPairs.length);\n    words.push(newWordPairs[wordIndex])\n    newWordPairs.splice(wordIndex, 1)\n  }\n\n  return words;\n} */\nconst nouns = [\"apple\", \"banana\", \"car\", \"dog\", \"elephant\", \"flower\", \"guitar\", \"hat\", \"ice cream\", \"jacket\", \"key\", \"lion\", \"moon\", \"notebook\", \"orange\", \"pizza\", \"queen\", \"rabbit\", \"sun\", \"tree\", \"umbrella\", \"violin\", \"watermelon\", \"xylophone\", \"yogurt\", \"zebra\"];\nconst chooseWords = () => {\n  let words = [];\n  let newNouns = [...nouns];\n  const pairs = 6; // Number of word pairs (half of the desired words count)\n  for (let i = 0; i < pairs; i++) {\n    const nounIndex = Math.floor(Math.random() * newNouns.length);\n    const noun = newNouns[nounIndex];\n    words.push(noun);\n    newNouns.splice(nounIndex, 1);\n  }\n  return words;\n};\nconst shuffleWords = words => {\n  // Duplicate the words array to form matching pairs\n  words = words.concat([...words]);\n\n  // Shuffle the words array to randomize their placement\n  for (let i = words.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [words[i], words[j]] = [words[j], words[i]];\n  }\n  return words;\n};\nconst randomWords = () => {\n  const chosenWords = chooseWords();\n  const shuffledWords = shuffleWords(chosenWords);\n  return shuffledWords;\n};\n\n// action creators\nexport const setBoard = () => {\n  const words = randomWords();\n  return {\n    type: \"board/setBoard\",\n    payload: words\n  };\n};\nexport const displayChosenWords = () => {\n  const chosenWords = chooseWords();\n  return {\n    type: \"draw/displayWords\",\n    payload: chosenWords\n  };\n};\nexport const flipCard = (cardID, teamID) => {\n  return {\n    type: \"board/flipCard\",\n    payload: {\n      cardID,\n      teamID\n    }\n  };\n};\nexport const resetCards = indices => {\n  //console.log('reseting')\n  return {\n    type: \"board/resetCards\"\n  };\n};\nexport const addTeamMatch = (teamID, cardsMatched) => {\n  return {\n    type: \"board/addTeamMatch\",\n    payload: {\n      teamID,\n      cardsMatched\n    }\n  };\n};\n// Add selector export statments below\nexport const selectBoard = state => state.board.map(card => ({\n  id: card.id,\n  contents: card.contents\n}));\nexport const selectVisibleIDs = state => state.board.filter(card => card.visible).map(card => card.id);\nexport const selectMatchedIDs = state => state.board.filter(card => card.matched).map(card => card.id);\nexport const selectTeamOneMatchIds = state => state.board.filter(card => card.teamMatch === 1).map(card => card.id);\nexport const selectTeamTwoMatchIds = state => state.board.filter(card => card.teamMatch === 2).map(card => card.id);","map":{"version":3,"names":["initialState","id","contents","visible","matched","teamMatch","boardReducer","state","arguments","length","undefined","action","type","setState","payload","forEach","element","index","push","console","log","map","card","flipState","cardID","teamID","index1","index2","filter","card1","card2","displayState","chosenWords","i","nouns","chooseWords","words","newNouns","pairs","nounIndex","Math","floor","random","noun","splice","shuffleWords","concat","j","randomWords","shuffledWords","setBoard","displayChosenWords","flipCard","resetCards","indices","addTeamMatch","cardsMatched","selectBoard","board","selectVisibleIDs","selectMatchedIDs","selectTeamOneMatchIds","selectTeamTwoMatchIds"],"sources":["/home/tome/lighthouse/projectG/projectg/src/pages/game/features/board/boardSlice.js"],"sourcesContent":["const initialState = [\n  { id: 0, contents: \"\", visible: true, matched: true, teamMatch: 0 },\n  { id: 1, contents: \"\", visible: true, matched: true, teamMatch: 0 },\n  { id: 2, contents: \"\", visible: true, matched: true, teamMatch: 0 },\n  { id: 3, contents: \"\", visible: true, matched: true, teamMatch: 0 },\n  { id: 4, contents: \"\", visible: true, matched: true, teamMatch: 0 },\n  { id: 5, contents: \"\", visible: true, matched: true, teamMatch: 0 },\n  { id: 6, contents: \"\", visible: true, matched: true, teamMatch: 0 },\n  { id: 7, contents: \"\", visible: true, matched: true, teamMatch: 0 },\n  { id: 8, contents: \"\", visible: true, matched: true, teamMatch: 0 },\n  { id: 9, contents: \"\", visible: true, matched: true, teamMatch: 0 },\n  { id: 10, contents: \"\", visible: true, matched: true, teamMatch: 0 },\n  { id: 11, contents: \"\", visible: true, matched: true, teamMatch: 0 },\n];\nexport const boardReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case \"board/setBoard\":\n      let setState = [];\n      action.payload.forEach((element, index) =>\n        setState.push({\n          id: index,\n          contents: element,\n          visible: false,\n          matched: false,\n          teamMatch: 0,\n        })\n      );\n      console.log(setState.map((card) => card.contents));\n\n      return setState;\n    case \"board/flipCard\":\n      let flipState = [...state];\n      const { cardID, teamID } = action.payload;\n      flipState[cardID] = { ...state[cardID], visible: true };\n\n      const [index1, index2] = flipState\n        .filter((card) => card.visible)\n        .map((card) => card.id);\n      if (index2 !== undefined) {\n        const card1 = flipState[index1];\n        const card2 = flipState[index2];\n        if (card1.contents === card2.contents) {\n          flipState[index1] = {\n            ...card1,\n            visible: false,\n            matched: true,\n            teamMatch: teamID,\n          };\n          flipState[index2] = {\n            ...card2,\n            visible: false,\n            matched: true,\n            teamMatch: teamID,\n          };\n        }\n      }\n\n      return flipState;\n\n    case \"board/resetCards\":\n      return state.map((card) => ({ ...card, visible: false }));\n\n    case \"draw/displayWords\":\n      let displayState = [...state];\n      const chosenWords = action.payload;\n\n      for (let i = 0; i < chosenWords.length; i++) {\n        displayState[i].contents = chosenWords[i];\n      }\n\n      return displayState;\n\n    default:\n      //console.log('Current state:', state);\n      return state;\n  }\n};\n/*\nconst wordPairs = [\n  'Provider', 'Provider', \n  'selector', 'selector', \n  'useSelector()', 'useSelector()', \n  'useDispatch()', 'useDispatch()',\n  'Pure Function', 'Pure Function',\n  'react-redux', 'react-redux',\n]\n\nconst randomWords = () => {\n  let words = []\n  let newWordPairs = [...wordPairs]\n  const reps = newWordPairs.length\n  for (let i=0; i<reps; i++) {\n    const wordIndex = Math.floor(Math.random()*newWordPairs.length);\n    words.push(newWordPairs[wordIndex])\n    newWordPairs.splice(wordIndex, 1)\n  }\n\n  return words;\n} */\nconst nouns = [\n  \"apple\",\n  \"banana\",\n  \"car\",\n  \"dog\",\n  \"elephant\",\n  \"flower\",\n  \"guitar\",\n  \"hat\",\n  \"ice cream\",\n  \"jacket\",\n  \"key\",\n  \"lion\",\n  \"moon\",\n  \"notebook\",\n  \"orange\",\n  \"pizza\",\n  \"queen\",\n  \"rabbit\",\n  \"sun\",\n  \"tree\",\n  \"umbrella\",\n  \"violin\",\n  \"watermelon\",\n  \"xylophone\",\n  \"yogurt\",\n  \"zebra\",\n];\nconst chooseWords = () => {\n  let words = [];\n  let newNouns = [...nouns];\n\n  const pairs = 6; // Number of word pairs (half of the desired words count)\n  for (let i = 0; i < pairs; i++) {\n    const nounIndex = Math.floor(Math.random() * newNouns.length);\n\n    const noun = newNouns[nounIndex];\n    words.push(noun);\n\n    newNouns.splice(nounIndex, 1);\n  }\n\n  return words;\n};\n\nconst shuffleWords = (words) => {\n  // Duplicate the words array to form matching pairs\n  words = words.concat([...words]);\n\n  // Shuffle the words array to randomize their placement\n  for (let i = words.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [words[i], words[j]] = [words[j], words[i]];\n  }\n\n  return words;\n};\n\nconst randomWords = () => {\n  const chosenWords = chooseWords();\n  const shuffledWords = shuffleWords(chosenWords);\n  return shuffledWords;\n};\n\n// action creators\nexport const setBoard = () => {\n  const words = randomWords();\n  return {\n    type: \"board/setBoard\",\n    payload: words,\n  };\n};\nexport const displayChosenWords = () => {\n  const chosenWords = chooseWords();\n  return {\n    type: \"draw/displayWords\",\n    payload: chosenWords,\n  };\n};\nexport const flipCard = (cardID, teamID) => {\n  return {\n    type: \"board/flipCard\",\n    payload: { cardID, teamID },\n  };\n};\n\nexport const resetCards = (indices) => {\n  //console.log('reseting')\n  return {\n    type: \"board/resetCards\",\n  };\n};\nexport const addTeamMatch = (teamID, cardsMatched) => {\n  return {\n    type: \"board/addTeamMatch\",\n    payload: { teamID, cardsMatched },\n  };\n};\n// Add selector export statments below\nexport const selectBoard = (state) =>\n  state.board.map((card) => ({ id: card.id, contents: card.contents }));\n\nexport const selectVisibleIDs = (state) =>\n  state.board.filter((card) => card.visible).map((card) => card.id);\n\nexport const selectMatchedIDs = (state) =>\n  state.board.filter((card) => card.matched).map((card) => card.id);\nexport const selectTeamOneMatchIds = (state) =>\n  state.board.filter((card) => card.teamMatch === 1).map((card) => card.id);\nexport const selectTeamTwoMatchIds = (state) =>\n  state.board.filter((card) => card.teamMatch === 2).map((card) => card.id);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}