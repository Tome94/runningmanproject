{"ast":null,"code":"var _jsxFileName = \"/home/tome/lighthouse/projectG/projectg/src/pages/canvas/drawPrompt.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { chosenWords } from '../game/features/board/boardSlice';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DisplayWordsComponent = () => {\n  _s();\n  const chosenWords = useSelector(state => state.board); // Assuming the chosen words are stored in the 'board' slice of the state\n  const dispatch = useDispatch();\n  useEffect(() => {\n    // Dispatch the action to choose and display the words\n    dispatch(chosenWords());\n\n    // Clear the words after 15 seconds\n    const timer = setTimeout(() => {\n      dispatch(chosenWords([])); // Pass an empty array to clear the words\n    }, 15000);\n    return () => {\n      clearTimeout(timer); // Clean up the timer on component unmount\n    };\n  }, [dispatch, chosenWords]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Displaying Words:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }, this);\n};\n_s(DisplayWordsComponent, \"cgwKJipezfVFOjhA3gpTmeViRSw=\", false, function () {\n  return [useSelector, useDispatch];\n});\n_c = DisplayWordsComponent;\nexport default DisplayWordsComponent;\nvar _c;\n$RefreshReg$(_c, \"DisplayWordsComponent\");","map":{"version":3,"names":["React","useEffect","useSelector","useDispatch","chosenWords","jsxDEV","_jsxDEV","DisplayWordsComponent","_s","state","board","dispatch","timer","setTimeout","clearTimeout","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/tome/lighthouse/projectG/projectg/src/pages/canvas/drawPrompt.js"],"sourcesContent":["import React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { chosenWords } from '../game/features/board/boardSlice';\n\nconst DisplayWordsComponent = () => {\n  const chosenWords = useSelector(state => state.board); // Assuming the chosen words are stored in the 'board' slice of the state\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    // Dispatch the action to choose and display the words\n    dispatch(chosenWords());\n\n    // Clear the words after 15 seconds\n    const timer = setTimeout(() => {\n      dispatch(chosenWords([])); // Pass an empty array to clear the words\n    }, 15000);\n\n    return () => {\n      clearTimeout(timer); // Clean up the timer on component unmount\n    };\n  }, [dispatch, chosenWords]);\n\n  return (\n    <div>\n      <h2>Displaying Words:</h2>\n      <ul>\n       \n      </ul>\n    </div>\n  );\n};\n\nexport default DisplayWordsComponent;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AACtD,SAASC,WAAW,QAAQ,mCAAmC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhE,MAAMC,qBAAqB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAClC,MAAMJ,WAAW,GAAGF,WAAW,CAACO,KAAK,IAAIA,KAAK,CAACC,KAAK,CAAC,CAAC,CAAC;EACvD,MAAMC,QAAQ,GAAGR,WAAW,CAAC,CAAC;EAE9BF,SAAS,CAAC,MAAM;IACd;IACAU,QAAQ,CAACP,WAAW,CAAC,CAAC,CAAC;;IAEvB;IACA,MAAMQ,KAAK,GAAGC,UAAU,CAAC,MAAM;MAC7BF,QAAQ,CAACP,WAAW,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IAC7B,CAAC,EAAE,KAAK,CAAC;IAET,OAAO,MAAM;MACXU,YAAY,CAACF,KAAK,CAAC,CAAC,CAAC;IACvB,CAAC;EACH,CAAC,EAAE,CAACD,QAAQ,EAAEP,WAAW,CAAC,CAAC;EAE3B,oBACEE,OAAA;IAAAS,QAAA,gBACET,OAAA;MAAAS,QAAA,EAAI;IAAiB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC1Bb,OAAA;MAAAU,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAEI,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;AAEV,CAAC;AAACX,EAAA,CA1BID,qBAAqB;EAAA,QACLL,WAAW,EACdC,WAAW;AAAA;AAAAiB,EAAA,GAFxBb,qBAAqB;AA4B3B,eAAeA,qBAAqB;AAAC,IAAAa,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}