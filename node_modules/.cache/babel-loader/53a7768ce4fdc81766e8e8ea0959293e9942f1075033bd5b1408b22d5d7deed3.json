{"ast":null,"code":"import _slicedToArray from\"/home/tome/lighthouse/projectG/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React from\"react\";// Add import statement below\nimport{useSelector}from\"react-redux\";import{selectTeamOneMatchIds,selectTeamTwoMatchIds,selectMatchedIDs}from\"../board/boardSlice\";import{selectCurrentTurn,matchOver}from\"../turns/turn\";import{updateTeamScore}from\"../../../local/Actions\";import{useDispatch}from\"react-redux\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";export var Score=function Score(){// Add selected data variable below\nvar teamOneCardsMatched=useSelector(selectTeamOneMatchIds);var teamtwoCardsMatched=useSelector(selectTeamTwoMatchIds);var teamID=useSelector(selectCurrentTurn);var team1score=useSelector(function(state){return state.team.team1Players.score;});var team2score=useSelector(function(state){return state.team.team2Players.score;});var isMatchOver=useSelector(function(state){return state.turn.isMatchOver;});var winner=useSelector(function(state){return state.turn.winner;});var dispatch=useDispatch();// Update team score when cardsMatched count increases\nReact.useEffect(function(){if(teamID===1){var newScore=teamOneCardsMatched.length;dispatch(updateTeamScore(teamID,newScore));}else{var _newScore=teamtwoCardsMatched.length;dispatch(updateTeamScore(teamID,_newScore));}},[teamOneCardsMatched.length,teamtwoCardsMatched.length,dispatch,teamID]);//found out when match is over\nvar team1name=useSelector(function(state){return state.team.team1Players[0].name;});var team2name=useSelector(function(state){return state.team.team2Players[0].name;});var turn=useSelector(selectCurrentTurn);var matchedIDs=useSelector(selectMatchedIDs);React.useEffect(function(){var matchIsOverHandler=function matchIsOverHandler(){dispatch(matchOver(team1name,team1score,team2name,team2score));};if(matchedIDs.length===12&&turn>0){var timer=setTimeout(function(){matchIsOverHandler();//console.log(team1name, team1score, team2name, team2score);\n},2000);return function(){return clearTimeout(timer);};}},[matchedIDs,dispatch,turn,team1name,team1score,team2name,team2score]);var _React$useState=React.useState(teamID),_React$useState2=_slicedToArray(_React$useState,2),currentTeamID=_React$useState2[0],setCurrentTeamID=_React$useState2[1];// Delay the update of currentTeamID by 2 seconds\nReact.useEffect(function(){var timer=setTimeout(function(){setCurrentTeamID(teamID);},2000);return function(){return clearTimeout(timer);};},[teamID]);return/*#__PURE__*/_jsx(\"div\",{className:\"score-board\",children:isMatchOver?/*#__PURE__*/_jsxs(\"div\",{className:\"result\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Match Result:\"}),winner]}):/*#__PURE__*/_jsxs(\"div\",{className:\"score-container\",children:[/*#__PURE__*/_jsx(\"br\",{}),currentTeamID===1&&/*#__PURE__*/_jsxs(\"span\",{children:[\"Turn: Team 1 || Score: \",team1score]}),currentTeamID===2&&/*#__PURE__*/_jsxs(\"span\",{children:[\"Turn: Team 2 || Score: \",team2score]})]})});};","map":{"version":3,"names":["React","useSelector","selectTeamOneMatchIds","selectTeamTwoMatchIds","selectMatchedIDs","selectCurrentTurn","matchOver","updateTeamScore","useDispatch","jsx","_jsx","jsxs","_jsxs","Score","teamOneCardsMatched","teamtwoCardsMatched","teamID","team1score","state","team","team1Players","score","team2score","team2Players","isMatchOver","turn","winner","dispatch","useEffect","newScore","length","team1name","name","team2name","matchedIDs","matchIsOverHandler","timer","setTimeout","clearTimeout","_React$useState","useState","_React$useState2","_slicedToArray","currentTeamID","setCurrentTeamID","className","children"],"sources":["/home/tome/lighthouse/projectG/src/pages/game/features/score/Score.js"],"sourcesContent":["import React from \"react\";\n// Add import statement below\nimport { useSelector } from \"react-redux\";\nimport {\n  selectTeamOneMatchIds,\n  selectTeamTwoMatchIds,\n  selectMatchedIDs,\n} from \"../board/boardSlice\";\nimport { selectCurrentTurn,matchOver } from \"../turns/turn\";\nimport { updateTeamScore } from \"../../../local/Actions\";\nimport { useDispatch } from \"react-redux\";\n\nexport const Score = () => {\n  // Add selected data variable below\n  const teamOneCardsMatched = useSelector(selectTeamOneMatchIds);\n  const teamtwoCardsMatched = useSelector(selectTeamTwoMatchIds);\n  const teamID = useSelector(selectCurrentTurn);\n  const team1score = useSelector((state) => state.team.team1Players.score);\n  const team2score = useSelector((state) => state.team.team2Players.score);\n  const isMatchOver = useSelector((state) => state.turn.isMatchOver);\n  const winner = useSelector((state) => state.turn.winner)\n  const dispatch = useDispatch();\n\n  // Update team score when cardsMatched count increases\n  React.useEffect(() => {\n    if (teamID === 1) {\n      const newScore = teamOneCardsMatched.length;\n      dispatch(updateTeamScore(teamID, newScore));\n    } else {\n      const newScore = teamtwoCardsMatched.length;\n      dispatch(updateTeamScore(teamID, newScore));\n    }\n  }, [teamOneCardsMatched.length, teamtwoCardsMatched.length, dispatch, teamID]);\n//found out when match is over\n  const team1name = useSelector((state) => state.team.team1Players[0].name);\n  const team2name = useSelector((state) => state.team.team2Players[0].name);\n  const turn = useSelector(selectCurrentTurn)\n  const matchedIDs = useSelector(selectMatchedIDs);\n  React.useEffect(() => {\n    const matchIsOverHandler = () => {\n      dispatch(matchOver(team1name, team1score, team2name, team2score));\n    };\n  \n    if (matchedIDs.length === 12 && turn > 0) {\n      const timer = setTimeout(() => {\n        matchIsOverHandler();\n        //console.log(team1name, team1score, team2name, team2score);\n      }, 2000);\n  \n      return () => clearTimeout(timer);\n    }\n  }, [matchedIDs, dispatch, turn, team1name, team1score, team2name, team2score]);\n  \n\n  const [currentTeamID, setCurrentTeamID] = React.useState(teamID);\n  // Delay the update of currentTeamID by 2 seconds\n  React.useEffect(() => {\n    const timer = setTimeout(() => {\n      setCurrentTeamID(teamID);\n    }, 2000);\n\n    return () => clearTimeout(timer);\n  }, [teamID]);\n\n  return (\n    <div className=\"score-board\">\n      {isMatchOver ? (\n        <div className=\"result\">\n          <h2>Match Result:</h2>\n          {winner}\n        </div>\n      ) : (\n        <div className=\"score-container\">\n          <br />\n          {currentTeamID === 1 && (\n            <span>Turn: Team 1 || Score: {team1score}</span>\n          )}\n          {currentTeamID === 2 && (\n            <span>Turn: Team 2 || Score: {team2score}</span>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}