{"ast":null,"code":"const initialState = {\n  currentTurn: 0,\n  lastActionTimestamp: 0,\n  isMatchOver: false,\n  winner: undefined\n};\nexport const turnReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    case \"END_TURN\":\n      const currentTimestamp = Date.now();\n      if (currentTimestamp - state.lastActionTimestamp < 1000) {\n        // If less than a second has passed since the last action, return the current state\n        return state;\n      }\n      return {\n        ...state,\n        currentTurn: state.currentTurn === 1 ? 2 : 1,\n        lastActionTimestamp: currentTimestamp\n      };\n    case \"SHOW_WINNER\":\n      const {\n        team1Name,\n        team1Score,\n        team2Name,\n        team2Score\n      } = action.payload;\n      let winner;\n      if (team1Score > team2Score) {\n        winner = team1Name;\n        console.log(`team 2${team1Score} team 2${team2Score}`);\n      } else if (team2Score > team1Score) {\n        winner = team2Name;\n        console.log(`team 2${team1Score} team 2${team2Score}`);\n      } else {\n        winner = \"Tie\";\n      }\n      return {\n        ...state,\n        isMatchOver: true,\n        currentTurn: 0,\n        winner: winner\n      };\n    case \"START_MATCH\":\n      return {\n        ...state,\n        currentTurn: 1,\n        isMatchOver: false\n      };\n    default:\n      return state;\n  }\n};\nexport const endTurn = () => ({\n  type: \"END_TURN\"\n});\nexport const matchOver = (team1Name, team1Score, team2Name, team2Score) => ({\n  type: \"SHOW_WINNER\",\n  payload: {\n    team1Name,\n    team1Score,\n    team2Name,\n    team2Score\n  }\n});\nexport const startMatch = () => ({\n  type: \"START_MATCH\"\n});\nexport const selectCurrentTurn = state => state.turn.currentTurn;","map":{"version":3,"names":["initialState","currentTurn","lastActionTimestamp","isMatchOver","winner","undefined","turnReducer","state","arguments","length","action","type","currentTimestamp","Date","now","team1Name","team1Score","team2Name","team2Score","payload","console","log","endTurn","matchOver","startMatch","selectCurrentTurn","turn"],"sources":["/home/tome/lighthouse/projectG/projectg/src/pages/game/features/turns/turn.js"],"sourcesContent":["const initialState = {\n  currentTurn: 0,\n  lastActionTimestamp: 0,\n  isMatchOver: false,\n  winner: undefined\n};\n\nexport const turnReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case \"END_TURN\":\n      const currentTimestamp = Date.now();\n      if (currentTimestamp - state.lastActionTimestamp < 1000) {\n        // If less than a second has passed since the last action, return the current state\n        return state;\n      }\n      return {\n        ...state,\n        currentTurn: state.currentTurn === 1 ? 2 : 1,\n        lastActionTimestamp: currentTimestamp,\n      };\n    case \"SHOW_WINNER\":\n      const { team1Name, team1Score, team2Name, team2Score } = action.payload;\n      let winner;\n\n      if (team1Score > team2Score) {\n        winner = team1Name;\n        console.log(`team 2${team1Score} team 2${team2Score}`)\n      } else if (team2Score > team1Score) {\n        winner = team2Name;\n        console.log(`team 2${team1Score} team 2${team2Score}`)\n      } else {\n        winner = \"Tie\";\n      }\n\n      return {\n        ...state,\n        isMatchOver: true,\n        currentTurn: 0,\n        winner: winner\n      }\n    case \"START_MATCH\": \n      return {\n        ...state,\n        currentTurn : 1,\n        isMatchOver: false\n      }\n    default:\n      return state;\n  }\n};\n\nexport const endTurn = () => ({\n  type: \"END_TURN\",\n});\n\nexport const matchOver = (team1Name, team1Score, team2Name, team2Score) => ({\n  type: \"SHOW_WINNER\",\n  payload: { team1Name, team1Score, team2Name, team2Score },\n});\n\nexport const startMatch = () => ({\n  type: \"START_MATCH\",\n});\n\nexport const selectCurrentTurn = (state) => state.turn.currentTurn;\n"],"mappings":"AAAA,MAAMA,YAAY,GAAG;EACnBC,WAAW,EAAE,CAAC;EACdC,mBAAmB,EAAE,CAAC;EACtBC,WAAW,EAAE,KAAK;EAClBC,MAAM,EAAEC;AACV,CAAC;AAED,OAAO,MAAMC,WAAW,GAAG,SAAAA,CAAA,EAAkC;EAAA,IAAjCC,KAAK,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAH,SAAA,GAAAG,SAAA,MAAGR,YAAY;EAAA,IAAEU,MAAM,GAAAF,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAH,SAAA;EACtD,QAAQK,MAAM,CAACC,IAAI;IACjB,KAAK,UAAU;MACb,MAAMC,gBAAgB,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC;MACnC,IAAIF,gBAAgB,GAAGL,KAAK,CAACL,mBAAmB,GAAG,IAAI,EAAE;QACvD;QACA,OAAOK,KAAK;MACd;MACA,OAAO;QACL,GAAGA,KAAK;QACRN,WAAW,EAAEM,KAAK,CAACN,WAAW,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC;QAC5CC,mBAAmB,EAAEU;MACvB,CAAC;IACH,KAAK,aAAa;MAChB,MAAM;QAAEG,SAAS;QAAEC,UAAU;QAAEC,SAAS;QAAEC;MAAW,CAAC,GAAGR,MAAM,CAACS,OAAO;MACvE,IAAIf,MAAM;MAEV,IAAIY,UAAU,GAAGE,UAAU,EAAE;QAC3Bd,MAAM,GAAGW,SAAS;QAClBK,OAAO,CAACC,GAAG,CAAE,SAAQL,UAAW,UAASE,UAAW,EAAC,CAAC;MACxD,CAAC,MAAM,IAAIA,UAAU,GAAGF,UAAU,EAAE;QAClCZ,MAAM,GAAGa,SAAS;QAClBG,OAAO,CAACC,GAAG,CAAE,SAAQL,UAAW,UAASE,UAAW,EAAC,CAAC;MACxD,CAAC,MAAM;QACLd,MAAM,GAAG,KAAK;MAChB;MAEA,OAAO;QACL,GAAGG,KAAK;QACRJ,WAAW,EAAE,IAAI;QACjBF,WAAW,EAAE,CAAC;QACdG,MAAM,EAAEA;MACV,CAAC;IACH,KAAK,aAAa;MAChB,OAAO;QACL,GAAGG,KAAK;QACRN,WAAW,EAAG,CAAC;QACfE,WAAW,EAAE;MACf,CAAC;IACH;MACE,OAAOI,KAAK;EAChB;AACF,CAAC;AAED,OAAO,MAAMe,OAAO,GAAGA,CAAA,MAAO;EAC5BX,IAAI,EAAE;AACR,CAAC,CAAC;AAEF,OAAO,MAAMY,SAAS,GAAGA,CAACR,SAAS,EAAEC,UAAU,EAAEC,SAAS,EAAEC,UAAU,MAAM;EAC1EP,IAAI,EAAE,aAAa;EACnBQ,OAAO,EAAE;IAAEJ,SAAS;IAAEC,UAAU;IAAEC,SAAS;IAAEC;EAAW;AAC1D,CAAC,CAAC;AAEF,OAAO,MAAMM,UAAU,GAAGA,CAAA,MAAO;EAC/Bb,IAAI,EAAE;AACR,CAAC,CAAC;AAEF,OAAO,MAAMc,iBAAiB,GAAIlB,KAAK,IAAKA,KAAK,CAACmB,IAAI,CAACzB,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}