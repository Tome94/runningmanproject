{"ast":null,"code":"var _jsxFileName = \"/home/tome/lighthouse/projectG/projectg/src/pages/canvas/drawPrompt.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DisplayWordsComponent = () => {\n  _s();\n  const board = useSelector(state => state.board); // Assuming the board is stored in the 'board' slice of the state\n  const [currentWordIndex, setCurrentWordIndex] = useState(0);\n  const [currentTeam, setCurrentTeam] = useState(1);\n  const [gameFinished, setGameFinished] = useState(false);\n  useEffect(() => {\n    const timer = setInterval(() => {\n      setCurrentWordIndex(prevIndex => (prevIndex + 1) % board.length);\n      setCurrentTeam(prevTeam => prevTeam === 1 ? 2 : 1);\n    }, 5000);\n    return () => {\n      clearInterval(timer); // Clean up the timer on component unmount\n    };\n  }, [board.length]);\n  const currentTeamWords = currentTeam === 1 ? board.filter((_, index) => index % 2 === 0) : board.filter((_, index) => index % 2 === 1);\n  useEffect(() => {\n    // Check if both team word arrays are empty\n    if (currentTeamWords.length === 0) {\n      // If both teams have no words left to display, and there are words in the board\n      setGameFinished(true);\n      console.log(`empty array ${currentTeamWords.length}`);\n    }\n  }, [currentTeamWords.length, board.length]);\n  if (gameFinished) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Completed! Press Next.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Displaying Words:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: [\"Team \", currentTeam, \" Words:\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: currentTeamWords.map((card, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        style: {\n          display: index === currentWordIndex ? 'list-item' : 'none'\n        },\n        children: card.contents\n      }, card.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n};\n_s(DisplayWordsComponent, \"ZzL20PFDFjqyH8LcJDrEsadhJnM=\", false, function () {\n  return [useSelector];\n});\n_c = DisplayWordsComponent;\nexport default DisplayWordsComponent;\nvar _c;\n$RefreshReg$(_c, \"DisplayWordsComponent\");","map":{"version":3,"names":["React","useState","useEffect","useSelector","jsxDEV","_jsxDEV","DisplayWordsComponent","_s","board","state","currentWordIndex","setCurrentWordIndex","currentTeam","setCurrentTeam","gameFinished","setGameFinished","timer","setInterval","prevIndex","length","prevTeam","clearInterval","currentTeamWords","filter","_","index","console","log","children","fileName","_jsxFileName","lineNumber","columnNumber","map","card","style","display","contents","id","_c","$RefreshReg$"],"sources":["/home/tome/lighthouse/projectG/projectg/src/pages/canvas/drawPrompt.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useSelector } from 'react-redux';\n\nconst DisplayWordsComponent = () => {\n  const board = useSelector((state) => state.board); // Assuming the board is stored in the 'board' slice of the state\n  const [currentWordIndex, setCurrentWordIndex] = useState(0);\n  const [currentTeam, setCurrentTeam] = useState(1);\n  const [gameFinished, setGameFinished] = useState(false);\n\n  useEffect(() => {\n    const timer = setInterval(() => {\n      setCurrentWordIndex((prevIndex) => (prevIndex + 1) % board.length);\n      setCurrentTeam((prevTeam) => (prevTeam === 1 ? 2 : 1));\n    }, 5000);\n\n    return () => {\n      clearInterval(timer); // Clean up the timer on component unmount\n    };\n  }, [board.length]);\n\n  const currentTeamWords =\n    currentTeam === 1\n      ? board.filter((_, index) => index % 2 === 0)\n      : board.filter((_, index) => index % 2 === 1);\n\n  useEffect(() => {\n    // Check if both team word arrays are empty\n    if (currentTeamWords.length === 0) {\n      // If both teams have no words left to display, and there are words in the board\n      setGameFinished(true);\n      console.log(`empty array ${currentTeamWords.length}`)\n    }\n  }, [currentTeamWords.length, board.length]);\n\n  if (gameFinished) {\n    return (\n      <div>\n        <h2>Completed! Press Next.</h2>\n        {/* You can add a button or some other component to handle the \"Next\" functionality */}\n      </div>\n    );\n  }\n\n  return (\n    <div>\n      <h2>Displaying Words:</h2>\n      <h3>Team {currentTeam} Words:</h3>\n      <ul>\n        {currentTeamWords.map((card, index) => (\n          <li key={card.id} style={{ display: index === currentWordIndex ? 'list-item' : 'none' }}>\n            {card.contents}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default DisplayWordsComponent;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}