{"ast":null,"code":"var _jsxFileName = \"/home/tome/lighthouse/projectG/projectg/src/pages/canvas/drawPrompt.js\",\n  _s = $RefreshSig$();\n/*import React, { useState, useEffect, useRef } from 'react';\nimport { useSelector } from 'react-redux';\n\nconst DisplayWordsComponent = () => {\n  const board = useSelector((state) => state.board); // Assuming the board is stored in the 'board' slice of the state\n  const [currentWordIndex, setCurrentWordIndex] = useState(0);\n  const [currentTeam, setCurrentTeam] = useState(1);\n  const [gameFinished, setGameFinished] = useState(false);\n\n  const intervalRef = useRef(null);\n\n  useEffect(() => {\n    const team1Words = board.filter((_, index) => index % 2 === 0);\n    const team2Words = board.filter((_, index) => index % 2 === 1);\n    const teamsHaveWords = team1Words.length > 0 || team2Words.length > 0;\n\n    setGameFinished(currentWordIndex === board.length-1);\n\n    if (teamsHaveWords) {\n      intervalRef.current = setInterval(() => {\n        setCurrentWordIndex((prevIndex) => (prevIndex + 1) % board.length);\n        setCurrentTeam((prevTeam) => (prevTeam === 1 ? 2 : 1));\n      }, 5000);\n      console.log(currentWordIndex)\n    }\n\n    return () => {\n      clearInterval(intervalRef.current);\n    };\n  }, [board, currentWordIndex]);\n\n  if (gameFinished) {\n    return (\n      <div>\n        <h2>Completed! Press Next.</h2>\n   \n      </div>\n    );\n  } else {\n\n  return (\n    <div>\n      <h2>Displaying Words:</h2>\n      <h3>Team {currentTeam} Words:</h3>\n      <ul>\n        {board.map((card, index) => (\n          <li key={card.id} style={{ display: index === currentWordIndex ? 'list-item' : 'none' }}>\n            {card.contents}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n        }\n};\n\nexport default DisplayWordsComponent;\n*/\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useSelector } from 'react-redux';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DisplayWordsComponent = () => {\n  _s();\n  const board = useSelector(state => state.board); // Assuming the board is stored in the 'board' slice of the state\n  const [currentWordIndex, setCurrentWordIndex] = useState(0);\n  const [currentTeam, setCurrentTeam] = useState(1);\n  const [gameFinished, setGameFinished] = useState(false);\n  const [remainingTime, setRemainingTime] = useState(15); // Set initial time here (in seconds)\n\n  const intervalRef = useRef(null);\n  useEffect(() => {\n    const team1Words = board.filter((_, index) => index % 2 === 0);\n    const team2Words = board.filter((_, index) => index % 2 === 1);\n    const teamsHaveWords = team1Words.length > 0 || team2Words.length > 0;\n    setGameFinished(currentWordIndex === board.length - 1);\n    if (teamsHaveWords) {\n      intervalRef.current = setInterval(() => {\n        setRemainingTime(prevTime => {\n          if (prevTime === 1) {\n            setCurrentWordIndex(prevIndex => (prevIndex + 1) % board.length);\n            setCurrentTeam(prevTeam => prevTeam === 1 ? 2 : 1);\n          }\n          return prevTime === 1 ? 15 : prevTime - 1;\n        });\n      }, 1000);\n    }\n    return () => {\n      clearInterval(intervalRef.current);\n    };\n  }, [board, currentWordIndex]);\n  useEffect(() => {\n    if (gameFinished) {\n      clearInterval(intervalRef.current);\n    }\n  }, [gameFinished]);\n  if (gameFinished) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Completed! Press Next.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Displaying Words:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: [\"Team \", currentTeam, \" Words:\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: board.map((card, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        style: {\n          display: index === currentWordIndex ? 'list-item' : 'none'\n        },\n        children: card.contents\n      }, card.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Time Remaining: \", remainingTime, \" seconds\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 110,\n    columnNumber: 5\n  }, this);\n};\n_s(DisplayWordsComponent, \"qU7Bo+gXRw0Mq8veUi+HAbM7ivk=\", false, function () {\n  return [useSelector];\n});\n_c = DisplayWordsComponent;\nexport default DisplayWordsComponent;\nvar _c;\n$RefreshReg$(_c, \"DisplayWordsComponent\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useSelector","jsxDEV","_jsxDEV","DisplayWordsComponent","_s","board","state","currentWordIndex","setCurrentWordIndex","currentTeam","setCurrentTeam","gameFinished","setGameFinished","remainingTime","setRemainingTime","intervalRef","team1Words","filter","_","index","team2Words","teamsHaveWords","length","current","setInterval","prevTime","prevIndex","prevTeam","clearInterval","children","fileName","_jsxFileName","lineNumber","columnNumber","map","card","style","display","contents","id","_c","$RefreshReg$"],"sources":["/home/tome/lighthouse/projectG/projectg/src/pages/canvas/drawPrompt.js"],"sourcesContent":["/*import React, { useState, useEffect, useRef } from 'react';\nimport { useSelector } from 'react-redux';\n\nconst DisplayWordsComponent = () => {\n  const board = useSelector((state) => state.board); // Assuming the board is stored in the 'board' slice of the state\n  const [currentWordIndex, setCurrentWordIndex] = useState(0);\n  const [currentTeam, setCurrentTeam] = useState(1);\n  const [gameFinished, setGameFinished] = useState(false);\n\n  const intervalRef = useRef(null);\n\n  useEffect(() => {\n    const team1Words = board.filter((_, index) => index % 2 === 0);\n    const team2Words = board.filter((_, index) => index % 2 === 1);\n    const teamsHaveWords = team1Words.length > 0 || team2Words.length > 0;\n\n    setGameFinished(currentWordIndex === board.length-1);\n\n    if (teamsHaveWords) {\n      intervalRef.current = setInterval(() => {\n        setCurrentWordIndex((prevIndex) => (prevIndex + 1) % board.length);\n        setCurrentTeam((prevTeam) => (prevTeam === 1 ? 2 : 1));\n      }, 5000);\n      console.log(currentWordIndex)\n    }\n\n    return () => {\n      clearInterval(intervalRef.current);\n    };\n  }, [board, currentWordIndex]);\n\n  if (gameFinished) {\n    return (\n      <div>\n        <h2>Completed! Press Next.</h2>\n   \n      </div>\n    );\n  } else {\n\n  return (\n    <div>\n      <h2>Displaying Words:</h2>\n      <h3>Team {currentTeam} Words:</h3>\n      <ul>\n        {board.map((card, index) => (\n          <li key={card.id} style={{ display: index === currentWordIndex ? 'list-item' : 'none' }}>\n            {card.contents}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n        }\n};\n\nexport default DisplayWordsComponent;\n*/\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useSelector } from 'react-redux';\n\nconst DisplayWordsComponent = () => {\n  const board = useSelector((state) => state.board); // Assuming the board is stored in the 'board' slice of the state\n  const [currentWordIndex, setCurrentWordIndex] = useState(0);\n  const [currentTeam, setCurrentTeam] = useState(1);\n  const [gameFinished, setGameFinished] = useState(false);\n  const [remainingTime, setRemainingTime] = useState(15); // Set initial time here (in seconds)\n\n  const intervalRef = useRef(null);\n\n  useEffect(() => {\n    const team1Words = board.filter((_, index) => index % 2 === 0);\n    const team2Words = board.filter((_, index) => index % 2 === 1);\n    const teamsHaveWords = team1Words.length > 0 || team2Words.length > 0;\n\n    setGameFinished(currentWordIndex === board.length-1);\n\n    if (teamsHaveWords) {\n      intervalRef.current = setInterval(() => {\n        setRemainingTime((prevTime) => {\n          if (prevTime === 1) {\n            setCurrentWordIndex((prevIndex) => (prevIndex + 1) % board.length);\n            setCurrentTeam((prevTeam) => (prevTeam === 1 ? 2 : 1));\n          }\n          return prevTime === 1 ? 15 : prevTime - 1;\n        });\n      }, 1000);\n    }\n\n    return () => {\n      clearInterval(intervalRef.current);\n    };\n  }, [board,currentWordIndex]);\n\n  useEffect(() => {\n    if (gameFinished) {\n      clearInterval(intervalRef.current);\n    }\n  }, [gameFinished]);\n\n  if (gameFinished) {\n    return (\n      <div>\n        <h2>Completed! Press Next.</h2>\n      </div>\n    );\n  }\n\n  return (\n    <div>\n      <h2>Displaying Words:</h2>\n      <h3>Team {currentTeam} Words:</h3>\n      <ul>\n        {board.map((card, index) => (\n          <li key={card.id} style={{ display: index === currentWordIndex ? 'list-item' : 'none' }}>\n            {card.contents}\n          </li>\n        ))}\n      </ul>\n      <p>Time Remaining: {remainingTime} seconds</p>\n    </div>\n  );\n};\n\nexport default DisplayWordsComponent;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}