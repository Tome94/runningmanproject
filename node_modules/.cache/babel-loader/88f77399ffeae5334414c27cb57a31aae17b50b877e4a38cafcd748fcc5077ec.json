{"ast":null,"code":"import _slicedToArray from\"/home/tome/lighthouse/projectG/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import _objectSpread from\"/home/tome/lighthouse/projectG/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _toConsumableArray from\"/home/tome/lighthouse/projectG/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";var initialState=[{id:0,contents:\"\",visible:true,matched:true,teamMatch:0},{id:1,contents:\"\",visible:true,matched:true,teamMatch:0},{id:2,contents:\"\",visible:true,matched:true,teamMatch:0},{id:3,contents:\"\",visible:true,matched:true,teamMatch:0},{id:4,contents:\"\",visible:true,matched:true,teamMatch:0},{id:5,contents:\"\",visible:true,matched:true,teamMatch:0},{id:6,contents:\"\",visible:true,matched:true,teamMatch:0},{id:7,contents:\"\",visible:true,matched:true,teamMatch:0},{id:8,contents:\"\",visible:true,matched:true,teamMatch:0},{id:9,contents:\"\",visible:true,matched:true,teamMatch:0},{id:10,contents:\"\",visible:true,matched:true,teamMatch:0},{id:11,contents:\"\",visible:true,matched:true,teamMatch:0}];export var boardReducer=function boardReducer(){var state=arguments.length>0&&arguments[0]!==undefined?arguments[0]:initialState;var action=arguments.length>1?arguments[1]:undefined;switch(action.type){case\"board/setBoard\":var setState=[];action.payload.forEach(function(element,index){return setState.push({id:index,contents:element,visible:false,matched:false,teamMatch:0});});console.log(setState.map(function(card){return card.contents;}));return setState;case\"board/flipCard\":var flipState=_toConsumableArray(state);var _action$payload=action.payload,cardID=_action$payload.cardID,teamID=_action$payload.teamID;flipState[cardID]=_objectSpread(_objectSpread({},state[cardID]),{},{visible:true});var _flipState$filter$map=flipState.filter(function(card){return card.visible;}).map(function(card){return card.id;}),_flipState$filter$map2=_slicedToArray(_flipState$filter$map,2),index1=_flipState$filter$map2[0],index2=_flipState$filter$map2[1];if(index2!==undefined){var card1=flipState[index1];var card2=flipState[index2];if(card1.contents===card2.contents){flipState[index1]=_objectSpread(_objectSpread({},card1),{},{visible:false,matched:true,teamMatch:teamID});flipState[index2]=_objectSpread(_objectSpread({},card2),{},{visible:false,matched:true,teamMatch:teamID});}}return flipState;case\"board/resetCards\":return state.map(function(card){return _objectSpread(_objectSpread({},card),{},{visible:false});});case\"draw/displayWords\":var displayState=_toConsumableArray(state);var chosenWords=action.payload;for(var i=0;i<chosenWords.length;i++){displayState[i].contents=chosenWords[i];}return displayState;default://console.log('Current state:', state);\nreturn state;}};/*\nconst wordPairs = [\n  'Provider', 'Provider', \n  'selector', 'selector', \n  'useSelector()', 'useSelector()', \n  'useDispatch()', 'useDispatch()',\n  'Pure Function', 'Pure Function',\n  'react-redux', 'react-redux',\n]\n\nconst randomWords = () => {\n  let words = []\n  let newWordPairs = [...wordPairs]\n  const reps = newWordPairs.length\n  for (let i=0; i<reps; i++) {\n    const wordIndex = Math.floor(Math.random()*newWordPairs.length);\n    words.push(newWordPairs[wordIndex])\n    newWordPairs.splice(wordIndex, 1)\n  }\n\n  return words;\n} */var nouns=[\"apple\",\"banana\",\"car\",\"dog\",\"elephant\",\"flower\",\"guitar\",\"hat\",\"ice cream\",\"jacket\",\"key\",\"lion\",\"moon\",\"notebook\",\"orange\",\"pizza\",\"queen\",\"rabbit\",\"sun\",\"tree\",\"umbrella\",\"violin\",\"watermelon\",\"xylophone\",\"yogurt\",\"zebra\"];var chooseWords=function chooseWords(){var words=[];var newNouns=[].concat(nouns);var pairs=6;// Number of word pairs (half of the desired words count)\nfor(var i=0;i<pairs;i++){var nounIndex=Math.floor(Math.random()*newNouns.length);var noun=newNouns[nounIndex];words.push(noun);newNouns.splice(nounIndex,1);}return words;};var shuffleWords=function shuffleWords(words){// Duplicate the words array to form matching pairs\nwords=words.concat(_toConsumableArray(words));// Shuffle the words array to randomize their placement\nfor(var i=words.length-1;i>0;i--){var j=Math.floor(Math.random()*(i+1));var _ref=[words[j],words[i]];words[i]=_ref[0];words[j]=_ref[1];}return words;};var randomWords=function randomWords(){var chosenWords=chooseWords();var shuffledWords=shuffleWords(chosenWords);return shuffledWords;};// action creators\nexport var setBoard=function setBoard(){var words=randomWords();return{type:\"board/setBoard\",payload:words};};export var displayChosenWords=function displayChosenWords(){var chosenWords=chooseWords();return{type:\"draw/displayWords\",payload:chosenWords};};export var flipCard=function flipCard(cardID,teamID){return{type:\"board/flipCard\",payload:{cardID:cardID,teamID:teamID}};};export var resetCards=function resetCards(indices){//console.log('reseting')\nreturn{type:\"board/resetCards\"};};export var addTeamMatch=function addTeamMatch(teamID,cardsMatched){return{type:\"board/addTeamMatch\",payload:{teamID:teamID,cardsMatched:cardsMatched}};};// Add selector export statments below\nexport var selectBoard=function selectBoard(state){return state.board.map(function(card){return{id:card.id,contents:card.contents};});};export var selectVisibleIDs=function selectVisibleIDs(state){return state.board.filter(function(card){return card.visible;}).map(function(card){return card.id;});};export var selectMatchedIDs=function selectMatchedIDs(state){return state.board.filter(function(card){return card.matched;}).map(function(card){return card.id;});};export var selectTeamOneMatchIds=function selectTeamOneMatchIds(state){return state.board.filter(function(card){return card.teamMatch===1;}).map(function(card){return card.id;});};export var selectTeamTwoMatchIds=function selectTeamTwoMatchIds(state){return state.board.filter(function(card){return card.teamMatch===2;}).map(function(card){return card.id;});};","map":{"version":3,"names":["initialState","id","contents","visible","matched","teamMatch","boardReducer","state","arguments","length","undefined","action","type","setState","payload","forEach","element","index","push","console","log","map","card","flipState","_toConsumableArray","_action$payload","cardID","teamID","_objectSpread","_flipState$filter$map","filter","_flipState$filter$map2","_slicedToArray","index1","index2","card1","card2","displayState","chosenWords","i","nouns","chooseWords","words","newNouns","concat","pairs","nounIndex","Math","floor","random","noun","splice","shuffleWords","j","_ref","randomWords","shuffledWords","setBoard","displayChosenWords","flipCard","resetCards","indices","addTeamMatch","cardsMatched","selectBoard","board","selectVisibleIDs","selectMatchedIDs","selectTeamOneMatchIds","selectTeamTwoMatchIds"],"sources":["/home/tome/lighthouse/projectG/src/pages/game/features/board/boardSlice.js"],"sourcesContent":["const initialState = [\n  { id: 0, contents: \"\", visible: true, matched: true, teamMatch: 0 },\n  { id: 1, contents: \"\", visible: true, matched: true, teamMatch: 0 },\n  { id: 2, contents: \"\", visible: true, matched: true, teamMatch: 0 },\n  { id: 3, contents: \"\", visible: true, matched: true, teamMatch: 0 },\n  { id: 4, contents: \"\", visible: true, matched: true, teamMatch: 0 },\n  { id: 5, contents: \"\", visible: true, matched: true, teamMatch: 0 },\n  { id: 6, contents: \"\", visible: true, matched: true, teamMatch: 0 },\n  { id: 7, contents: \"\", visible: true, matched: true, teamMatch: 0 },\n  { id: 8, contents: \"\", visible: true, matched: true, teamMatch: 0 },\n  { id: 9, contents: \"\", visible: true, matched: true, teamMatch: 0 },\n  { id: 10, contents: \"\", visible: true, matched: true, teamMatch: 0 },\n  { id: 11, contents: \"\", visible: true, matched: true, teamMatch: 0 },\n];\nexport const boardReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case \"board/setBoard\":\n      let setState = [];\n      action.payload.forEach((element, index) =>\n        setState.push({\n          id: index,\n          contents: element,\n          visible: false,\n          matched: false,\n          teamMatch: 0,\n        })\n      );\n      console.log(setState.map((card) => card.contents));\n\n      return setState;\n    case \"board/flipCard\":\n      let flipState = [...state];\n      const { cardID, teamID } = action.payload;\n      flipState[cardID] = { ...state[cardID], visible: true };\n\n      const [index1, index2] = flipState\n        .filter((card) => card.visible)\n        .map((card) => card.id);\n      if (index2 !== undefined) {\n        const card1 = flipState[index1];\n        const card2 = flipState[index2];\n        if (card1.contents === card2.contents) {\n          flipState[index1] = {\n            ...card1,\n            visible: false,\n            matched: true,\n            teamMatch: teamID,\n          };\n          flipState[index2] = {\n            ...card2,\n            visible: false,\n            matched: true,\n            teamMatch: teamID,\n          };\n        }\n      }\n\n      return flipState;\n\n    case \"board/resetCards\":\n      return state.map((card) => ({ ...card, visible: false }));\n\n    case \"draw/displayWords\":\n      let displayState = [...state];\n      const chosenWords = action.payload;\n\n      for (let i = 0; i < chosenWords.length; i++) {\n        displayState[i].contents = chosenWords[i];\n      }\n\n      return displayState;\n\n    default:\n      //console.log('Current state:', state);\n      return state;\n  }\n};\n/*\nconst wordPairs = [\n  'Provider', 'Provider', \n  'selector', 'selector', \n  'useSelector()', 'useSelector()', \n  'useDispatch()', 'useDispatch()',\n  'Pure Function', 'Pure Function',\n  'react-redux', 'react-redux',\n]\n\nconst randomWords = () => {\n  let words = []\n  let newWordPairs = [...wordPairs]\n  const reps = newWordPairs.length\n  for (let i=0; i<reps; i++) {\n    const wordIndex = Math.floor(Math.random()*newWordPairs.length);\n    words.push(newWordPairs[wordIndex])\n    newWordPairs.splice(wordIndex, 1)\n  }\n\n  return words;\n} */\nconst nouns = [\n  \"apple\",\n  \"banana\",\n  \"car\",\n  \"dog\",\n  \"elephant\",\n  \"flower\",\n  \"guitar\",\n  \"hat\",\n  \"ice cream\",\n  \"jacket\",\n  \"key\",\n  \"lion\",\n  \"moon\",\n  \"notebook\",\n  \"orange\",\n  \"pizza\",\n  \"queen\",\n  \"rabbit\",\n  \"sun\",\n  \"tree\",\n  \"umbrella\",\n  \"violin\",\n  \"watermelon\",\n  \"xylophone\",\n  \"yogurt\",\n  \"zebra\",\n];\nconst chooseWords = () => {\n  let words = [];\n  let newNouns = [...nouns];\n\n  const pairs = 6; // Number of word pairs (half of the desired words count)\n  for (let i = 0; i < pairs; i++) {\n    const nounIndex = Math.floor(Math.random() * newNouns.length);\n\n    const noun = newNouns[nounIndex];\n    words.push(noun);\n\n    newNouns.splice(nounIndex, 1);\n  }\n\n  return words;\n};\n\nconst shuffleWords = (words) => {\n  // Duplicate the words array to form matching pairs\n  words = words.concat([...words]);\n\n  // Shuffle the words array to randomize their placement\n  for (let i = words.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [words[i], words[j]] = [words[j], words[i]];\n  }\n\n  return words;\n};\n\nconst randomWords = () => {\n  const chosenWords = chooseWords();\n  const shuffledWords = shuffleWords(chosenWords);\n  return shuffledWords;\n};\n\n// action creators\nexport const setBoard = () => {\n  const words = randomWords();\n  return {\n    type: \"board/setBoard\",\n    payload: words,\n  };\n};\nexport const displayChosenWords = () => {\n  const chosenWords = chooseWords();\n  return {\n    type: \"draw/displayWords\",\n    payload: chosenWords,\n  };\n};\nexport const flipCard = (cardID, teamID) => {\n  return {\n    type: \"board/flipCard\",\n    payload: { cardID, teamID },\n  };\n};\n\nexport const resetCards = (indices) => {\n  //console.log('reseting')\n  return {\n    type: \"board/resetCards\",\n  };\n};\nexport const addTeamMatch = (teamID, cardsMatched) => {\n  return {\n    type: \"board/addTeamMatch\",\n    payload: { teamID, cardsMatched },\n  };\n};\n// Add selector export statments below\nexport const selectBoard = (state) =>\n  state.board.map((card) => ({ id: card.id, contents: card.contents }));\n\nexport const selectVisibleIDs = (state) =>\n  state.board.filter((card) => card.visible).map((card) => card.id);\n\nexport const selectMatchedIDs = (state) =>\n  state.board.filter((card) => card.matched).map((card) => card.id);\nexport const selectTeamOneMatchIds = (state) =>\n  state.board.filter((card) => card.teamMatch === 1).map((card) => card.id);\nexport const selectTeamTwoMatchIds = (state) =>\n  state.board.filter((card) => card.teamMatch === 2).map((card) => card.id);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}