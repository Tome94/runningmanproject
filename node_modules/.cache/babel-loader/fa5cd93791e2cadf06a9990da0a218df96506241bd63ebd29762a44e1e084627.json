{"ast":null,"code":"var _jsxFileName = \"/home/tome/lighthouse/projectG/src/pages/game/features/board/cardRow/card/Card.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { selectCurrentTurn, endTurn } from '../../../turns/turn';\nimport { selectVisibleIDs, flipCard, selectMatchedIDs, resetCards, selectBoard // Import the selector to access board state\n} from '../../boardSlice';\nimport cardLogo from './runningmanlogo.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Card = _ref => {\n  _s();\n  let {\n    id\n  } = _ref;\n  const visibleIDs = useSelector(selectVisibleIDs);\n  const matchedIDs = useSelector(selectMatchedIDs);\n  const teamID = useSelector(selectCurrentTurn);\n  const board = useSelector(selectBoard); // Get the entire board state\n  const dispatch = useDispatch();\n  const flipHandler = id => {\n    dispatch(flipCard(id, teamID));\n  };\n  const ResetCardHandler = () => {\n    setTimeout(() => {\n      dispatch(resetCards());\n    }, 2000);\n  };\n  const EndTurn = () => {\n    dispatch(endTurn());\n  };\n  let cardStyle = 'resting';\n  let click = () => flipHandler(id);\n  let cardContent = /*#__PURE__*/_jsxDEV(\"img\", {\n    src: cardLogo,\n    className: \"logo-placeholder\",\n    alt: \"Card option\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 21\n  }, this);\n  const card = board.find(card => card.id === id); // Find the card in the board by ID\n\n  if (card) {\n    if (visibleIDs.includes(id) || matchedIDs.includes(id)) {\n      cardContent = card.image ? /*#__PURE__*/_jsxDEV(\"img\", {\n        src: card.image,\n        alt: \"Card option\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 34\n      }, this) : card.contents;\n      click = () => {};\n    }\n    if (matchedIDs.includes(id)) {\n      cardStyle = 'matched';\n    }\n    if (visibleIDs.length === 2) {\n      click = () => {};\n    }\n    if (visibleIDs.length >= 2 && !matchedIDs.includes(id)) {\n      cardStyle = 'no-match';\n      ResetCardHandler();\n      EndTurn();\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: click,\n    className: `card ${cardStyle}`,\n    children: cardContent\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n};\n_s(Card, \"1W1OtaT2fZX2qcnFXQe2s08fYBo=\", false, function () {\n  return [useSelector, useSelector, useSelector, useSelector, useDispatch];\n});\n_c = Card;\nvar _c;\n$RefreshReg$(_c, \"Card\");","map":{"version":3,"names":["React","useSelector","useDispatch","selectCurrentTurn","endTurn","selectVisibleIDs","flipCard","selectMatchedIDs","resetCards","selectBoard","cardLogo","jsxDEV","_jsxDEV","Card","_ref","_s","id","visibleIDs","matchedIDs","teamID","board","dispatch","flipHandler","ResetCardHandler","setTimeout","EndTurn","cardStyle","click","cardContent","src","className","alt","fileName","_jsxFileName","lineNumber","columnNumber","card","find","includes","image","contents","length","onClick","children","_c","$RefreshReg$"],"sources":["/home/tome/lighthouse/projectG/src/pages/game/features/board/cardRow/card/Card.js"],"sourcesContent":["import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n  selectCurrentTurn,\n  endTurn,\n} from '../../../turns/turn';\nimport {\n  selectVisibleIDs,\n  flipCard,\n  selectMatchedIDs,\n  resetCards,\n  selectBoard, // Import the selector to access board state\n} from '../../boardSlice';\nimport cardLogo from './runningmanlogo.png';\n\nexport const Card = ({ id }) => {\n  const visibleIDs = useSelector(selectVisibleIDs);\n  const matchedIDs = useSelector(selectMatchedIDs);\n  const teamID = useSelector(selectCurrentTurn);\n  const board = useSelector(selectBoard); // Get the entire board state\n  const dispatch = useDispatch();\n\n  const flipHandler = (id) => {\n    dispatch(flipCard(id, teamID));\n  };\n\n  const ResetCardHandler = () => {\n    setTimeout(() => {\n      dispatch(resetCards());\n    }, 2000);\n  };\n\n  const EndTurn = () => {\n    dispatch(endTurn());\n  };\n\n  let cardStyle = 'resting';\n  let click = () => flipHandler(id);\n  let cardContent = <img src={cardLogo} className=\"logo-placeholder\" alt=\"Card option\" />;\n\n  const card = board.find((card) => card.id === id); // Find the card in the board by ID\n\n  if (card) {\n    if (visibleIDs.includes(id) || matchedIDs.includes(id)) {\n      cardContent = card.image ? <img src={card.image} alt=\"Card option\" /> : card.contents;\n      click = () => {};\n    }\n\n    if (matchedIDs.includes(id)) {\n      cardStyle = 'matched';\n    }\n\n    if (visibleIDs.length === 2) {\n      click = () => {};\n    }\n\n    if (visibleIDs.length >= 2 && !matchedIDs.includes(id)) {\n      cardStyle = 'no-match';\n      ResetCardHandler();\n      EndTurn();\n    }\n  }\n\n  return (\n    <button onClick={click} className={`card ${cardStyle}`}>\n      {cardContent}\n    </button>\n  );\n};\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AACtD,SACEC,iBAAiB,EACjBC,OAAO,QACF,qBAAqB;AAC5B,SACEC,gBAAgB,EAChBC,QAAQ,EACRC,gBAAgB,EAChBC,UAAU,EACVC,WAAW,CAAE;AAAA,OACR,kBAAkB;AACzB,OAAOC,QAAQ,MAAM,sBAAsB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5C,OAAO,MAAMC,IAAI,GAAGC,IAAA,IAAY;EAAAC,EAAA;EAAA,IAAX;IAAEC;EAAG,CAAC,GAAAF,IAAA;EACzB,MAAMG,UAAU,GAAGhB,WAAW,CAACI,gBAAgB,CAAC;EAChD,MAAMa,UAAU,GAAGjB,WAAW,CAACM,gBAAgB,CAAC;EAChD,MAAMY,MAAM,GAAGlB,WAAW,CAACE,iBAAiB,CAAC;EAC7C,MAAMiB,KAAK,GAAGnB,WAAW,CAACQ,WAAW,CAAC,CAAC,CAAC;EACxC,MAAMY,QAAQ,GAAGnB,WAAW,CAAC,CAAC;EAE9B,MAAMoB,WAAW,GAAIN,EAAE,IAAK;IAC1BK,QAAQ,CAACf,QAAQ,CAACU,EAAE,EAAEG,MAAM,CAAC,CAAC;EAChC,CAAC;EAED,MAAMI,gBAAgB,GAAGA,CAAA,KAAM;IAC7BC,UAAU,CAAC,MAAM;MACfH,QAAQ,CAACb,UAAU,CAAC,CAAC,CAAC;IACxB,CAAC,EAAE,IAAI,CAAC;EACV,CAAC;EAED,MAAMiB,OAAO,GAAGA,CAAA,KAAM;IACpBJ,QAAQ,CAACjB,OAAO,CAAC,CAAC,CAAC;EACrB,CAAC;EAED,IAAIsB,SAAS,GAAG,SAAS;EACzB,IAAIC,KAAK,GAAGA,CAAA,KAAML,WAAW,CAACN,EAAE,CAAC;EACjC,IAAIY,WAAW,gBAAGhB,OAAA;IAAKiB,GAAG,EAAEnB,QAAS;IAACoB,SAAS,EAAC,kBAAkB;IAACC,GAAG,EAAC;EAAa;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;EAEvF,MAAMC,IAAI,GAAGhB,KAAK,CAACiB,IAAI,CAAED,IAAI,IAAKA,IAAI,CAACpB,EAAE,KAAKA,EAAE,CAAC,CAAC,CAAC;;EAEnD,IAAIoB,IAAI,EAAE;IACR,IAAInB,UAAU,CAACqB,QAAQ,CAACtB,EAAE,CAAC,IAAIE,UAAU,CAACoB,QAAQ,CAACtB,EAAE,CAAC,EAAE;MACtDY,WAAW,GAAGQ,IAAI,CAACG,KAAK,gBAAG3B,OAAA;QAAKiB,GAAG,EAAEO,IAAI,CAACG,KAAM;QAACR,GAAG,EAAC;MAAa;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,GAAGC,IAAI,CAACI,QAAQ;MACrFb,KAAK,GAAGA,CAAA,KAAM,CAAC,CAAC;IAClB;IAEA,IAAIT,UAAU,CAACoB,QAAQ,CAACtB,EAAE,CAAC,EAAE;MAC3BU,SAAS,GAAG,SAAS;IACvB;IAEA,IAAIT,UAAU,CAACwB,MAAM,KAAK,CAAC,EAAE;MAC3Bd,KAAK,GAAGA,CAAA,KAAM,CAAC,CAAC;IAClB;IAEA,IAAIV,UAAU,CAACwB,MAAM,IAAI,CAAC,IAAI,CAACvB,UAAU,CAACoB,QAAQ,CAACtB,EAAE,CAAC,EAAE;MACtDU,SAAS,GAAG,UAAU;MACtBH,gBAAgB,CAAC,CAAC;MAClBE,OAAO,CAAC,CAAC;IACX;EACF;EAEA,oBACEb,OAAA;IAAQ8B,OAAO,EAAEf,KAAM;IAACG,SAAS,EAAG,QAAOJ,SAAU,EAAE;IAAAiB,QAAA,EACpDf;EAAW;IAAAI,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACN,CAAC;AAEb,CAAC;AAACpB,EAAA,CArDWF,IAAI;EAAA,QACIZ,WAAW,EACXA,WAAW,EACfA,WAAW,EACZA,WAAW,EACRC,WAAW;AAAA;AAAA0C,EAAA,GALjB/B,IAAI;AAAA,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}