{"ast":null,"code":"var _jsxFileName = \"/home/tome/lighthouse/projectG/projectg/src/pages/canvas/drawPrompt.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst DisplayWordsComponent = () => {\n  _s();\n  const board = useSelector(state => state.board); // Assuming the board is stored in the 'board' slice of the state\n  const [currentWordIndex, setCurrentWordIndex] = useState(0);\n  const [currentTeamIndex, setCurrentTeamIndex] = useState(0);\n  const teams = [[], []];\n\n  // Divide the words into two teams\n  board.forEach((card, index) => teams[index % 2].push(card));\n  useEffect(() => {\n    const timer = setInterval(() => {\n      if (currentWordIndex === teams[currentTeamIndex].length - 1) {\n        // If all words for the current team have been displayed\n        setCurrentTeamIndex(prevTeamIndex => prevTeamIndex === 0 ? 1 : 0); // Switch to the next team\n        setCurrentWordIndex(0); // Reset the word index for the new team\n      } else {\n        setCurrentWordIndex(prevIndex => prevIndex + 1);\n      }\n    }, 5000);\n    return () => {\n      clearInterval(timer); // Clean up the timer on component unmount\n    };\n  }, [currentTeamIndex, currentWordIndex, teams]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Displaying Words:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this), teams.map((team, teamIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: currentTeamIndex === teamIndex && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"Team \", teamIndex + 1, \" Words:\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: team.map((card, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            style: {\n              display: currentWordIndex === index ? 'list-item' : 'none'\n            },\n            children: card.contents\n          }, card.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 39,\n            columnNumber: 19\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true)\n    }, teamIndex, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n};\n_s(DisplayWordsComponent, \"hI5ruQbnKzawKhqnjemWCHGrx6g=\", false, function () {\n  return [useSelector];\n});\n_c = DisplayWordsComponent;\nexport default DisplayWordsComponent;\nvar _c;\n$RefreshReg$(_c, \"DisplayWordsComponent\");","map":{"version":3,"names":["React","useState","useEffect","useSelector","jsxDEV","_jsxDEV","Fragment","_Fragment","DisplayWordsComponent","_s","board","state","currentWordIndex","setCurrentWordIndex","currentTeamIndex","setCurrentTeamIndex","teams","forEach","card","index","push","timer","setInterval","length","prevTeamIndex","prevIndex","clearInterval","children","fileName","_jsxFileName","lineNumber","columnNumber","map","team","teamIndex","style","display","contents","id","_c","$RefreshReg$"],"sources":["/home/tome/lighthouse/projectG/projectg/src/pages/canvas/drawPrompt.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useSelector } from 'react-redux';\n\nconst DisplayWordsComponent = () => {\n  const board = useSelector((state) => state.board); // Assuming the board is stored in the 'board' slice of the state\n  const [currentWordIndex, setCurrentWordIndex] = useState(0);\n  const [currentTeamIndex, setCurrentTeamIndex] = useState(0);\n  const teams = [[], []];\n\n  // Divide the words into two teams\n  board.forEach((card, index) => teams[index % 2].push(card));\n\n  useEffect(() => {\n    const timer = setInterval(() => {\n      if (currentWordIndex === teams[currentTeamIndex].length - 1) {\n        // If all words for the current team have been displayed\n        setCurrentTeamIndex((prevTeamIndex) => (prevTeamIndex === 0 ? 1 : 0)); // Switch to the next team\n        setCurrentWordIndex(0); // Reset the word index for the new team\n      } else {\n        setCurrentWordIndex((prevIndex) => prevIndex + 1);\n      }\n    }, 5000);\n\n    return () => {\n      clearInterval(timer); // Clean up the timer on component unmount\n    };\n  }, [currentTeamIndex, currentWordIndex, teams]);\n\n  return (\n    <div>\n      <h2>Displaying Words:</h2>\n      {teams.map((team, teamIndex) => (\n        <div key={teamIndex}>\n          {currentTeamIndex === teamIndex && (\n            <>\n              <h3>Team {teamIndex + 1} Words:</h3>\n              <ul>\n                {team.map((card, index) => (\n                  <li key={card.id} style={{ display: currentWordIndex === index ? 'list-item' : 'none' }}>\n                    {card.contents}\n                  </li>\n                ))}\n              </ul>\n            </>\n          )}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default DisplayWordsComponent;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,WAAW,QAAQ,aAAa;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAE1C,MAAMC,qBAAqB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAClC,MAAMC,KAAK,GAAGP,WAAW,CAAEQ,KAAK,IAAKA,KAAK,CAACD,KAAK,CAAC,CAAC,CAAC;EACnD,MAAM,CAACE,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGZ,QAAQ,CAAC,CAAC,CAAC;EAC3D,MAAM,CAACa,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGd,QAAQ,CAAC,CAAC,CAAC;EAC3D,MAAMe,KAAK,GAAG,CAAC,EAAE,EAAE,EAAE,CAAC;;EAEtB;EACAN,KAAK,CAACO,OAAO,CAAC,CAACC,IAAI,EAAEC,KAAK,KAAKH,KAAK,CAACG,KAAK,GAAG,CAAC,CAAC,CAACC,IAAI,CAACF,IAAI,CAAC,CAAC;EAE3DhB,SAAS,CAAC,MAAM;IACd,MAAMmB,KAAK,GAAGC,WAAW,CAAC,MAAM;MAC9B,IAAIV,gBAAgB,KAAKI,KAAK,CAACF,gBAAgB,CAAC,CAACS,MAAM,GAAG,CAAC,EAAE;QAC3D;QACAR,mBAAmB,CAAES,aAAa,IAAMA,aAAa,KAAK,CAAC,GAAG,CAAC,GAAG,CAAE,CAAC,CAAC,CAAC;QACvEX,mBAAmB,CAAC,CAAC,CAAC,CAAC,CAAC;MAC1B,CAAC,MAAM;QACLA,mBAAmB,CAAEY,SAAS,IAAKA,SAAS,GAAG,CAAC,CAAC;MACnD;IACF,CAAC,EAAE,IAAI,CAAC;IAER,OAAO,MAAM;MACXC,aAAa,CAACL,KAAK,CAAC,CAAC,CAAC;IACxB,CAAC;EACH,CAAC,EAAE,CAACP,gBAAgB,EAAEF,gBAAgB,EAAEI,KAAK,CAAC,CAAC;EAE/C,oBACEX,OAAA;IAAAsB,QAAA,gBACEtB,OAAA;MAAAsB,QAAA,EAAI;IAAiB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EACzBf,KAAK,CAACgB,GAAG,CAAC,CAACC,IAAI,EAAEC,SAAS,kBACzB7B,OAAA;MAAAsB,QAAA,EACGb,gBAAgB,KAAKoB,SAAS,iBAC7B7B,OAAA,CAAAE,SAAA;QAAAoB,QAAA,gBACEtB,OAAA;UAAAsB,QAAA,GAAI,OAAK,EAACO,SAAS,GAAG,CAAC,EAAC,SAAO;QAAA;UAAAN,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACpC1B,OAAA;UAAAsB,QAAA,EACGM,IAAI,CAACD,GAAG,CAAC,CAACd,IAAI,EAAEC,KAAK,kBACpBd,OAAA;YAAkB8B,KAAK,EAAE;cAAEC,OAAO,EAAExB,gBAAgB,KAAKO,KAAK,GAAG,WAAW,GAAG;YAAO,CAAE;YAAAQ,QAAA,EACrFT,IAAI,CAACmB;UAAQ,GADPnB,IAAI,CAACoB,EAAE;YAAAV,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAEZ,CACL;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACA,CAAC;MAAA,eACL;IACH,GAZOG,SAAS;MAAAN,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAad,CACN,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAACtB,EAAA,CA9CID,qBAAqB;EAAA,QACXL,WAAW;AAAA;AAAAoC,EAAA,GADrB/B,qBAAqB;AAgD3B,eAAeA,qBAAqB;AAAC,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}