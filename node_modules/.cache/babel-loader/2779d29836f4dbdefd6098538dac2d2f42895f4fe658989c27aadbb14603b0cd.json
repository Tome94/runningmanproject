{"ast":null,"code":"var _jsxFileName = \"/home/tome/lighthouse/projectG/src/pages/game/features/board/cardRow/card/Card.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\n// Add import statements below\nimport { useSelector, useDispatch } from 'react-redux';\nimport { selectCurrentTurn } from '../../../turns/turn';\nimport { selectVisibleIDs, flipCard, selectMatchedIDs, resetCards } from '../../boardSlice';\nimport cardLogo from './runningmanlogo.png';\nimport { endTurn } from '../../../turns/turn';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Card = _ref => {\n  _s();\n  let {\n    id,\n    image\n  } = _ref;\n  // Add selected data and dispatch variables below\n  const visibleIDs = useSelector(selectVisibleIDs);\n  const matchedIDs = useSelector(selectMatchedIDs);\n  const teamID = useSelector(selectCurrentTurn);\n  const dispatch = useDispatch();\n  // flip card action\n  const flipHandler = id => {\n    // Add action dispatch below\n    dispatch(flipCard(id, teamID));\n  };\n  const ResetCardHandler = () => {\n    // Add action dispatch below\n\n    setTimeout(() => {\n      dispatch(resetCards());\n    }, 2000);\n  };\n  const EndTurn = () => {\n    dispatch(endTurn());\n  };\n  let cardStyle = 'resting';\n  let click = () => flipHandler(id, teamID);\n\n  //let cardText = <img src={cardLogo} className=\"logo-placeholder\" alt=\"Card option\" />\n  let cardText = /*#__PURE__*/_jsxDEV(\"img\", {\n    src: cardLogo,\n    className: \"logo-placeholder\",\n    alt: \"Card option\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 18\n  }, this);\n  ;\n\n  // 1st if statement\n  // implement card id array membership check\n  if (visibleIDs.includes(id) || matchedIDs.includes(id)) {\n    cardText = image;\n    click = () => {};\n  }\n\n  // 2nd if statement\n  // implement card id array membership check\n  if (matchedIDs.includes(id)) {\n    cardStyle = 'matched';\n  }\n\n  // 3rd if statement\n  // implement number of flipped cards check\n  if (visibleIDs.length === 2) {\n    click = () => {};\n  }\n  //turn the not match red\n  if (visibleIDs.length >= 2 && !matchedIDs.includes(id)) {\n    cardStyle = 'no-match';\n    ResetCardHandler();\n    click = EndTurn();\n  }\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: click,\n    className: `card ${cardStyle}`,\n    children: cardText\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n};\n_s(Card, \"x6CftSxye4pbkRbf5MRV1vP/Pss=\", false, function () {\n  return [useSelector, useSelector, useSelector, useDispatch];\n});\n_c = Card;\nvar _c;\n$RefreshReg$(_c, \"Card\");","map":{"version":3,"names":["React","useSelector","useDispatch","selectCurrentTurn","selectVisibleIDs","flipCard","selectMatchedIDs","resetCards","cardLogo","endTurn","jsxDEV","_jsxDEV","Card","_ref","_s","id","image","visibleIDs","matchedIDs","teamID","dispatch","flipHandler","ResetCardHandler","setTimeout","EndTurn","cardStyle","click","cardText","src","className","alt","fileName","_jsxFileName","lineNumber","columnNumber","includes","length","onClick","children","_c","$RefreshReg$"],"sources":["/home/tome/lighthouse/projectG/src/pages/game/features/board/cardRow/card/Card.js"],"sourcesContent":["import React from 'react';\n// Add import statements below\nimport {useSelector, useDispatch} from 'react-redux'\nimport { selectCurrentTurn } from '../../../turns/turn';\nimport {selectVisibleIDs, flipCard, selectMatchedIDs, resetCards} from '../../boardSlice'\nimport cardLogo from './runningmanlogo.png'\nimport { endTurn } from '../../../turns/turn';\n\nexport const Card = ({ id, image }) => {\n  // Add selected data and dispatch variables below\n  const visibleIDs = useSelector(selectVisibleIDs)\n  const matchedIDs = useSelector(selectMatchedIDs)\n  const teamID = useSelector(selectCurrentTurn)\n  const dispatch = useDispatch()\n  // flip card action\n  const flipHandler = (id) => {\n    // Add action dispatch below\n    dispatch(flipCard(id, teamID))\n  };\n  const ResetCardHandler = () => {\n    // Add action dispatch below\n    \n    setTimeout(()=>{\n      dispatch(resetCards())\n    },2000)\n  };\n  const EndTurn = () => {\n    dispatch(endTurn())\n  }\n  let cardStyle = 'resting'\n  let click = () => flipHandler(id, teamID);\n  \n  //let cardText = <img src={cardLogo} className=\"logo-placeholder\" alt=\"Card option\" />\n  let cardText = <img src={cardLogo} className=\"logo-placeholder\" alt=\"Card option\" />;\n\n  ;\n\n  // 1st if statement\n  // implement card id array membership check\n  if (visibleIDs.includes(id) || matchedIDs.includes(id)) {\n    cardText = image;\n    click = () => {};\n  }\n\n  // 2nd if statement\n  // implement card id array membership check\n  if (matchedIDs.includes(id)) {\n    cardStyle = 'matched';\n  }\n\n  // 3rd if statement\n  // implement number of flipped cards check\n  if (visibleIDs.length === 2) {\n    click = () => {};\n  }\n  //turn the not match red\n  if (visibleIDs.length >= 2 && !matchedIDs.includes(id)){\n    cardStyle = 'no-match'\n    ResetCardHandler()\n    click = EndTurn();\n  }\n  return (\n    <button onClick={click} className={`card ${cardStyle}`}>\n      {cardText}\n    </button>\n  );\n};\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB;AACA,SAAQC,WAAW,EAAEC,WAAW,QAAO,aAAa;AACpD,SAASC,iBAAiB,QAAQ,qBAAqB;AACvD,SAAQC,gBAAgB,EAAEC,QAAQ,EAAEC,gBAAgB,EAAEC,UAAU,QAAO,kBAAkB;AACzF,OAAOC,QAAQ,MAAM,sBAAsB;AAC3C,SAASC,OAAO,QAAQ,qBAAqB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9C,OAAO,MAAMC,IAAI,GAAGC,IAAA,IAAmB;EAAAC,EAAA;EAAA,IAAlB;IAAEC,EAAE;IAAEC;EAAM,CAAC,GAAAH,IAAA;EAChC;EACA,MAAMI,UAAU,GAAGhB,WAAW,CAACG,gBAAgB,CAAC;EAChD,MAAMc,UAAU,GAAGjB,WAAW,CAACK,gBAAgB,CAAC;EAChD,MAAMa,MAAM,GAAGlB,WAAW,CAACE,iBAAiB,CAAC;EAC7C,MAAMiB,QAAQ,GAAGlB,WAAW,CAAC,CAAC;EAC9B;EACA,MAAMmB,WAAW,GAAIN,EAAE,IAAK;IAC1B;IACAK,QAAQ,CAACf,QAAQ,CAACU,EAAE,EAAEI,MAAM,CAAC,CAAC;EAChC,CAAC;EACD,MAAMG,gBAAgB,GAAGA,CAAA,KAAM;IAC7B;;IAEAC,UAAU,CAAC,MAAI;MACbH,QAAQ,CAACb,UAAU,CAAC,CAAC,CAAC;IACxB,CAAC,EAAC,IAAI,CAAC;EACT,CAAC;EACD,MAAMiB,OAAO,GAAGA,CAAA,KAAM;IACpBJ,QAAQ,CAACX,OAAO,CAAC,CAAC,CAAC;EACrB,CAAC;EACD,IAAIgB,SAAS,GAAG,SAAS;EACzB,IAAIC,KAAK,GAAGA,CAAA,KAAML,WAAW,CAACN,EAAE,EAAEI,MAAM,CAAC;;EAEzC;EACA,IAAIQ,QAAQ,gBAAGhB,OAAA;IAAKiB,GAAG,EAAEpB,QAAS;IAACqB,SAAS,EAAC,kBAAkB;IAACC,GAAG,EAAC;EAAa;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;EAEpF;;EAEA;EACA;EACA,IAAIjB,UAAU,CAACkB,QAAQ,CAACpB,EAAE,CAAC,IAAIG,UAAU,CAACiB,QAAQ,CAACpB,EAAE,CAAC,EAAE;IACtDY,QAAQ,GAAGX,KAAK;IAChBU,KAAK,GAAGA,CAAA,KAAM,CAAC,CAAC;EAClB;;EAEA;EACA;EACA,IAAIR,UAAU,CAACiB,QAAQ,CAACpB,EAAE,CAAC,EAAE;IAC3BU,SAAS,GAAG,SAAS;EACvB;;EAEA;EACA;EACA,IAAIR,UAAU,CAACmB,MAAM,KAAK,CAAC,EAAE;IAC3BV,KAAK,GAAGA,CAAA,KAAM,CAAC,CAAC;EAClB;EACA;EACA,IAAIT,UAAU,CAACmB,MAAM,IAAI,CAAC,IAAI,CAAClB,UAAU,CAACiB,QAAQ,CAACpB,EAAE,CAAC,EAAC;IACrDU,SAAS,GAAG,UAAU;IACtBH,gBAAgB,CAAC,CAAC;IAClBI,KAAK,GAAGF,OAAO,CAAC,CAAC;EACnB;EACA,oBACEb,OAAA;IAAQ0B,OAAO,EAAEX,KAAM;IAACG,SAAS,EAAG,QAAOJ,SAAU,EAAE;IAAAa,QAAA,EACpDX;EAAQ;IAAAI,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEb,CAAC;AAACpB,EAAA,CA1DWF,IAAI;EAAA,QAEIX,WAAW,EACXA,WAAW,EACfA,WAAW,EACTC,WAAW;AAAA;AAAAqC,EAAA,GALjB3B,IAAI;AAAA,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}