{"ast":null,"code":"var _jsxFileName = \"/home/tome/lighthouse/projectG/projectg/src/pages/canvas/drawPrompt.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst DisplayWordsComponent = () => {\n  _s();\n  const board = useSelector(state => state.board); // Assuming the board is stored in the 'board' slice of the state\n  const [currentWordIndex, setCurrentWordIndex] = useState(0);\n  const [currentTeam, setCurrentTeam] = useState(1);\n  useEffect(() => {\n    const timer = setInterval(() => {\n      if (currentWordIndex === currentTeamWords.length - 1) {\n        // If all words for the current team have been displayed\n        setCurrentTeam(prevTeam => prevTeam === 1 ? 2 : 1); // Switch to the next team\n        setCurrentWordIndex(0); // Reset the word index for the new team\n      } else {\n        setCurrentWordIndex(prevIndex => prevIndex + 1);\n      }\n    }, 5000);\n    return () => {\n      clearInterval(timer); // Clean up the timer on component unmount\n    };\n  }, [currentTeam, currentWordIndex, currentTeamWords.length]);\n  const currentTeamWords = currentTeam === 1 ? board.filter((_, index) => index % 2 === 0) : board.filter((_, index) => index % 2 === 1);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Displaying Words:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), currentWordIndex < currentTeamWords.length ?\n    /*#__PURE__*/\n    // Check if there are more words to display\n    _jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Team \", currentTeam, \" Words:\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: currentTeamWords.map((card, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          style: {\n            display: index === currentWordIndex ? 'list-item' : 'none'\n          },\n          children: card.contents\n        }, card.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Game Finished!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n};\n_s(DisplayWordsComponent, \"C6lEMsHo8Co/yur3ta468k7xLvc=\", false, function () {\n  return [useSelector];\n});\n_c = DisplayWordsComponent;\nexport default DisplayWordsComponent;\nvar _c;\n$RefreshReg$(_c, \"DisplayWordsComponent\");","map":{"version":3,"names":["React","useState","useEffect","useSelector","jsxDEV","_jsxDEV","Fragment","_Fragment","DisplayWordsComponent","_s","board","state","currentWordIndex","setCurrentWordIndex","currentTeam","setCurrentTeam","timer","setInterval","currentTeamWords","length","prevTeam","prevIndex","clearInterval","filter","_","index","children","fileName","_jsxFileName","lineNumber","columnNumber","map","card","style","display","contents","id","_c","$RefreshReg$"],"sources":["/home/tome/lighthouse/projectG/projectg/src/pages/canvas/drawPrompt.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useSelector } from 'react-redux';\n\nconst DisplayWordsComponent = () => {\n  const board = useSelector((state) => state.board); // Assuming the board is stored in the 'board' slice of the state\n  const [currentWordIndex, setCurrentWordIndex] = useState(0);\n  const [currentTeam, setCurrentTeam] = useState(1);\n\n  useEffect(() => {\n    const timer = setInterval(() => {\n      if (currentWordIndex === currentTeamWords.length - 1) {\n        // If all words for the current team have been displayed\n        setCurrentTeam((prevTeam) => (prevTeam === 1 ? 2 : 1)); // Switch to the next team\n        setCurrentWordIndex(0); // Reset the word index for the new team\n      } else {\n        setCurrentWordIndex((prevIndex) => prevIndex + 1);\n      }\n    }, 5000);\n\n    return () => {\n      clearInterval(timer); // Clean up the timer on component unmount\n    };\n  }, [currentTeam, currentWordIndex, currentTeamWords.length]);\n\n  const currentTeamWords =\n    currentTeam === 1\n      ? board.filter((_, index) => index % 2 === 0)\n      : board.filter((_, index) => index % 2 === 1);\n\n  return (\n    <div>\n      <h2>Displaying Words:</h2>\n      {currentWordIndex < currentTeamWords.length ? ( // Check if there are more words to display\n        <>\n          <h3>Team {currentTeam} Words:</h3>\n          <ul>\n            {currentTeamWords.map((card, index) => (\n              <li key={card.id} style={{ display: index === currentWordIndex ? 'list-item' : 'none' }}>\n                {card.contents}\n              </li>\n            ))}\n          </ul>\n        </>\n      ) : (\n        <p>Game Finished!</p>\n      )}\n    </div>\n  );\n};\n\nexport default DisplayWordsComponent;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}