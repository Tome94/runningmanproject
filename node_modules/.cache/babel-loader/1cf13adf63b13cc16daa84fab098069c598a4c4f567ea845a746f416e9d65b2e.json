{"ast":null,"code":"var _jsxFileName = \"/home/tome/lighthouse/projectG/projectg/src/pages/canvas/drawPrompt.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useSelector } from 'react-redux';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DisplayWordsComponent = () => {\n  _s();\n  const board = useSelector(state => state.board); // Assuming the board is stored in the 'board' slice of the state\n  const [currentWordIndex, setCurrentWordIndex] = useState(0);\n  const [currentTeam, setCurrentTeam] = useState(1);\n  const [gameFinished, setGameFinished] = useState(false);\n  const intervalRef = useRef(null);\n  useEffect(() => {\n    const team1Words = board.filter((_, index) => index % 2 === 0);\n    const team2Words = board.filter((_, index) => index % 2 === 1);\n    const teamsHaveWords = team1Words.length > 0 || team2Words.length > 0;\n    console.log(board);\n    setGameFinished(currentWordIndex === board.length);\n    if (teamsHaveWords) {\n      intervalRef.current = setInterval(() => {\n        setCurrentWordIndex(prevIndex => (prevIndex + 1) % board.length);\n        setCurrentTeam(prevTeam => prevTeam === 1 ? 2 : 1);\n      }, 5000);\n      console.log(currentWordIndex);\n    }\n    return () => {\n      clearInterval(intervalRef.current);\n    };\n  }, [board, currentWordIndex]);\n  if (gameFinished) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Completed! Press Next.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Displaying Words:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Team \", currentTeam, \" Words:\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: board.map((card, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          style: {\n            display: index === currentWordIndex ? 'list-item' : 'none'\n          },\n          children: card.contents\n        }, card.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 11\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 5\n    }, this);\n  }\n};\n_s(DisplayWordsComponent, \"8OcWYfDcBxoPbu5bhIpNaKGz/6g=\", false, function () {\n  return [useSelector];\n});\n_c = DisplayWordsComponent;\nexport default DisplayWordsComponent;\nvar _c;\n$RefreshReg$(_c, \"DisplayWordsComponent\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useSelector","jsxDEV","_jsxDEV","DisplayWordsComponent","_s","board","state","currentWordIndex","setCurrentWordIndex","currentTeam","setCurrentTeam","gameFinished","setGameFinished","intervalRef","team1Words","filter","_","index","team2Words","teamsHaveWords","length","console","log","current","setInterval","prevIndex","prevTeam","clearInterval","children","fileName","_jsxFileName","lineNumber","columnNumber","map","card","style","display","contents","id","_c","$RefreshReg$"],"sources":["/home/tome/lighthouse/projectG/projectg/src/pages/canvas/drawPrompt.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { useSelector } from 'react-redux';\n\nconst DisplayWordsComponent = () => {\n  const board = useSelector((state) => state.board); // Assuming the board is stored in the 'board' slice of the state\n  const [currentWordIndex, setCurrentWordIndex] = useState(0);\n  const [currentTeam, setCurrentTeam] = useState(1);\n  const [gameFinished, setGameFinished] = useState(false);\n\n  const intervalRef = useRef(null);\n\n  useEffect(() => {\n    const team1Words = board.filter((_, index) => index % 2 === 0);\n    const team2Words = board.filter((_, index) => index % 2 === 1);\n    const teamsHaveWords = team1Words.length > 0 || team2Words.length > 0;\nconsole.log(board)\n    setGameFinished(currentWordIndex === board.length);\n\n    if (teamsHaveWords) {\n      intervalRef.current = setInterval(() => {\n        setCurrentWordIndex((prevIndex) => (prevIndex + 1) % board.length);\n        setCurrentTeam((prevTeam) => (prevTeam === 1 ? 2 : 1));\n      }, 5000);\n      console.log(currentWordIndex)\n    }\n\n    return () => {\n      clearInterval(intervalRef.current);\n    };\n  }, [board, currentWordIndex]);\n\n  if (gameFinished) {\n    return (\n      <div>\n        <h2>Completed! Press Next.</h2>\n        {/* You can add a button or some other component to handle the \"Next\" functionality */}\n      </div>\n    );\n  } else {\n\n  return (\n    <div>\n      <h2>Displaying Words:</h2>\n      <h3>Team {currentTeam} Words:</h3>\n      <ul>\n        {board.map((card, index) => (\n          <li key={card.id} style={{ display: index === currentWordIndex ? 'list-item' : 'none' }}>\n            {card.contents}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n        }\n};\n\nexport default DisplayWordsComponent;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}