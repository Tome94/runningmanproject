{"ast":null,"code":"const initialState = [{\n  id: 0,\n  contents: 'Provider',\n  visible: true,\n  matched: true,\n  teamMatch: 0\n}, {\n  id: 1,\n  contents: 'Provider',\n  visible: true,\n  matched: true,\n  teamMatch: 0\n}, {\n  id: 2,\n  contents: 'selector',\n  visible: true,\n  matched: true,\n  teamMatch: 0\n}, {\n  id: 3,\n  contents: 'selector',\n  visible: true,\n  matched: true,\n  teamMatch: 0\n}, {\n  id: 4,\n  contents: 'useSelector()',\n  visible: true,\n  matched: true,\n  teamMatch: 0\n}, {\n  id: 5,\n  contents: 'useSelector()',\n  visible: true,\n  matched: true,\n  teamMatch: 0\n}, {\n  id: 6,\n  contents: 'useDispatch()',\n  visible: true,\n  matched: true,\n  teamMatch: 0\n}, {\n  id: 7,\n  contents: 'useDispatch()',\n  visible: true,\n  matched: true,\n  teamMatch: 0\n}, {\n  id: 8,\n  contents: 'Pure Function',\n  visible: true,\n  matched: true,\n  teamMatch: 0\n}, {\n  id: 9,\n  contents: 'Pure Function',\n  visible: true,\n  matched: true,\n  teamMatch: 0\n}, {\n  id: 10,\n  contents: 'react-redux',\n  visible: true,\n  matched: true,\n  teamMatch: 0\n}, {\n  id: 11,\n  contents: 'react-redux',\n  visible: true,\n  matched: true,\n  teamMatch: 0\n}];\nexport const boardReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    case 'board/setBoard':\n      let setState = [];\n      action.payload.forEach((element, index) => setState.push({\n        id: index,\n        contents: element,\n        visible: false,\n        matched: false,\n        teamMatch: 0\n      }));\n      return setState;\n    case 'board/flipCard':\n      const {\n        cardID,\n        teamID\n      } = action.payload;\n\n      // Create a copy of the state array and update the selected card\n      const flipState = state.map((card, index) => {\n        if (index === cardID) {\n          return {\n            ...card,\n            visible: true\n          };\n        }\n        return card;\n      });\n\n      // Find the indices of the currently visible cards\n      const visibleIndices = flipState.reduce((acc, card, index) => {\n        if (card.visible) acc.push(index);\n        return acc;\n      }, []);\n\n      // Check if two cards are visible\n      if (visibleIndices.length === 2) {\n        const card1 = flipState[visibleIndices[0]];\n        const card2 = flipState[visibleIndices[1]];\n\n        // Check if the contents of the two cards match\n        if (card1.contents === card2.contents) {\n          // If they match, update their matching status and teamMatch\n          flipState[visibleIndices[0]] = {\n            ...card1,\n            matched: true,\n            teamMatch: teamID\n          };\n          flipState[visibleIndices[1]] = {\n            ...card2,\n            matched: true,\n            teamMatch: teamID\n          };\n        }\n      }\n      return flipState;\n    case 'board/resetCards':\n      return state.map(card => ({\n        ...card,\n        visible: false\n      }));\n\n    /* case 'board/addTeamMatch':\n       const { teamID, cardsMatched } = action.payload;\n       return state.map((card) => {\n         if (cardsMatched.includes(card.id)) {\n           return { ...card, teamMatch: teamID };\n         }\n         return card;\n       });\n    */\n    default:\n      console.log('Current state:', state);\n      return state;\n  }\n};\nconst wordPairs = ['Provider', 'Provider', 'selector', 'selector', 'useSelector()', 'useSelector()', 'useDispatch()', 'useDispatch()', 'Pure Function', 'Pure Function', 'react-redux', 'react-redux'];\nconst randomWords = () => {\n  let words = [];\n  let newWordPairs = [...wordPairs];\n  const reps = newWordPairs.length;\n  for (let i = 0; i < reps; i++) {\n    const wordIndex = Math.floor(Math.random() * newWordPairs.length);\n    words.push(newWordPairs[wordIndex]);\n    newWordPairs.splice(wordIndex, 1);\n  }\n  return words;\n};\n\n// action creators\nexport const setBoard = () => {\n  const words = randomWords();\n  return {\n    type: 'board/setBoard',\n    payload: words\n  };\n};\nexport const flipCard = (id, teamID) => {\n  return {\n    type: 'board/flipCard',\n    payload: {\n      id,\n      teamID\n    }\n  };\n};\nexport const resetCards = indices => {\n  console.log('reseting');\n  return {\n    type: 'board/resetCards'\n  };\n};\nexport const addTeamMatch = (teamID, cardsMatched) => {\n  return {\n    type: 'board/addTeamMatch',\n    payload: {\n      teamID,\n      cardsMatched\n    }\n  };\n};\n// Add selector export statments below\nexport const selectBoard = state => state.board.map(card => ({\n  id: card.id,\n  contents: card.contents\n}));\nexport const selectVisibleIDs = state => state.board.filter(card => card.visible).map(card => card.id);\nexport const selectMatchedIDs = state => state.board.filter(card => card.matched).map(card => card.id);","map":{"version":3,"names":["initialState","id","contents","visible","matched","teamMatch","boardReducer","state","arguments","length","undefined","action","type","setState","payload","forEach","element","index","push","cardID","teamID","flipState","map","card","visibleIndices","reduce","acc","card1","card2","console","log","wordPairs","randomWords","words","newWordPairs","reps","i","wordIndex","Math","floor","random","splice","setBoard","flipCard","resetCards","indices","addTeamMatch","cardsMatched","selectBoard","board","selectVisibleIDs","filter","selectMatchedIDs"],"sources":["/home/tome/lighthouse/projectG/projectg/src/pages/game/features/board/boardSlice.js"],"sourcesContent":["\nconst initialState = [\n  {id: 0, contents: 'Provider', visible: true, matched: true, teamMatch:0}, \n  {id: 1, contents: 'Provider', visible: true, matched: true, teamMatch:0}, \n  {id: 2, contents: 'selector', visible: true, matched: true, teamMatch:0}, \n  {id: 3, contents: 'selector', visible: true, matched: true, teamMatch:0}, \n  {id: 4, contents: 'useSelector()', visible: true, matched: true, teamMatch:0}, \n  {id: 5, contents: 'useSelector()', visible: true, matched: true, teamMatch:0}, \n  {id: 6, contents: 'useDispatch()', visible: true, matched: true, teamMatch:0}, \n  {id: 7, contents: 'useDispatch()', visible: true, matched: true, teamMatch:0}, \n  {id: 8, contents: 'Pure Function', visible: true, matched: true, teamMatch:0}, \n  {id: 9, contents: 'Pure Function', visible: true, matched: true, teamMatch:0}, \n  {id: 10, contents: 'react-redux', visible: true, matched: true, teamMatch:0}, \n  {id: 11, contents: 'react-redux', visible: true, matched: true, teamMatch:0}, \n];\nexport const boardReducer = (state = initialState, action) => {\n\n  switch (action.type) {\n    case 'board/setBoard':\n      let setState = [];\n      action.payload.forEach((element, index) => \n        setState.push({id: index, \n                      contents: element, \n                      visible: false, \n                      matched: false,\n                      teamMatch: 0})\n      );\n      return setState;\n      case 'board/flipCard':\n        const { cardID, teamID } = action.payload;\n        \n        // Create a copy of the state array and update the selected card\n        const flipState = state.map((card, index) => {\n          if (index === cardID) {\n            return { ...card, visible: true };\n          }\n          return card;\n        });\n      \n        // Find the indices of the currently visible cards\n        const visibleIndices = flipState.reduce((acc, card, index) => {\n          if (card.visible) acc.push(index);\n          return acc;\n        }, []);\n      \n        // Check if two cards are visible\n        if (visibleIndices.length === 2) {\n          const card1 = flipState[visibleIndices[0]];\n          const card2 = flipState[visibleIndices[1]];\n      \n          // Check if the contents of the two cards match\n          if (card1.contents === card2.contents) {\n            // If they match, update their matching status and teamMatch\n            flipState[visibleIndices[0]] = { ...card1, matched: true, teamMatch: teamID };\n            flipState[visibleIndices[1]] = { ...card2, matched: true, teamMatch: teamID };\n          }\n        }\n      \n        return flipState;\n      \n    case 'board/resetCards':\n      return state.map(card => ({...card, visible: false}));\n    \n     /* case 'board/addTeamMatch':\n        const { teamID, cardsMatched } = action.payload;\n        return state.map((card) => {\n          if (cardsMatched.includes(card.id)) {\n            return { ...card, teamMatch: teamID };\n          }\n          return card;\n        });\n  */\n    default:\n      console.log('Current state:', state);\n      return state;\n  }\n}\n\nconst wordPairs = [\n  'Provider', 'Provider', \n  'selector', 'selector', \n  'useSelector()', 'useSelector()', \n  'useDispatch()', 'useDispatch()',\n  'Pure Function', 'Pure Function',\n  'react-redux', 'react-redux',\n]\n\nconst randomWords = () => {\n  let words = []\n  let newWordPairs = [...wordPairs]\n  const reps = newWordPairs.length\n  for (let i=0; i<reps; i++) {\n    const wordIndex = Math.floor(Math.random()*newWordPairs.length);\n    words.push(newWordPairs[wordIndex])\n    newWordPairs.splice(wordIndex, 1)\n  }\n\n  return words;\n} \n\n// action creators\nexport const setBoard = () => {\n  const words = randomWords()\n  return {\n    type: 'board/setBoard',\n    payload: words\n  }\n}\n\nexport const flipCard = (id,teamID) => {\n  return {\n    type: 'board/flipCard',\n    payload: {id, teamID}\n  }\n}\n\nexport const resetCards = (indices) => {\n  console.log('reseting')\n  return {\n    type: 'board/resetCards'\n  }\n}\nexport const addTeamMatch = (teamID, cardsMatched) => {\n  return {\n    type: 'board/addTeamMatch',\n    payload: { teamID, cardsMatched },\n  };\n};\n// Add selector export statments below\nexport const selectBoard = state => state.board.map(card=>({id: card.id, contents: card.contents}))\n\nexport const selectVisibleIDs = state => state.board\n.filter(card => card.visible)\n.map(card => card.id)\n\nexport const selectMatchedIDs = state => state.board\n.filter(card => card.matched)\n.map(card => card.id)\n"],"mappings":"AACA,MAAMA,YAAY,GAAG,CACnB;EAACC,EAAE,EAAE,CAAC;EAAEC,QAAQ,EAAE,UAAU;EAAEC,OAAO,EAAE,IAAI;EAAEC,OAAO,EAAE,IAAI;EAAEC,SAAS,EAAC;AAAC,CAAC,EACxE;EAACJ,EAAE,EAAE,CAAC;EAAEC,QAAQ,EAAE,UAAU;EAAEC,OAAO,EAAE,IAAI;EAAEC,OAAO,EAAE,IAAI;EAAEC,SAAS,EAAC;AAAC,CAAC,EACxE;EAACJ,EAAE,EAAE,CAAC;EAAEC,QAAQ,EAAE,UAAU;EAAEC,OAAO,EAAE,IAAI;EAAEC,OAAO,EAAE,IAAI;EAAEC,SAAS,EAAC;AAAC,CAAC,EACxE;EAACJ,EAAE,EAAE,CAAC;EAAEC,QAAQ,EAAE,UAAU;EAAEC,OAAO,EAAE,IAAI;EAAEC,OAAO,EAAE,IAAI;EAAEC,SAAS,EAAC;AAAC,CAAC,EACxE;EAACJ,EAAE,EAAE,CAAC;EAAEC,QAAQ,EAAE,eAAe;EAAEC,OAAO,EAAE,IAAI;EAAEC,OAAO,EAAE,IAAI;EAAEC,SAAS,EAAC;AAAC,CAAC,EAC7E;EAACJ,EAAE,EAAE,CAAC;EAAEC,QAAQ,EAAE,eAAe;EAAEC,OAAO,EAAE,IAAI;EAAEC,OAAO,EAAE,IAAI;EAAEC,SAAS,EAAC;AAAC,CAAC,EAC7E;EAACJ,EAAE,EAAE,CAAC;EAAEC,QAAQ,EAAE,eAAe;EAAEC,OAAO,EAAE,IAAI;EAAEC,OAAO,EAAE,IAAI;EAAEC,SAAS,EAAC;AAAC,CAAC,EAC7E;EAACJ,EAAE,EAAE,CAAC;EAAEC,QAAQ,EAAE,eAAe;EAAEC,OAAO,EAAE,IAAI;EAAEC,OAAO,EAAE,IAAI;EAAEC,SAAS,EAAC;AAAC,CAAC,EAC7E;EAACJ,EAAE,EAAE,CAAC;EAAEC,QAAQ,EAAE,eAAe;EAAEC,OAAO,EAAE,IAAI;EAAEC,OAAO,EAAE,IAAI;EAAEC,SAAS,EAAC;AAAC,CAAC,EAC7E;EAACJ,EAAE,EAAE,CAAC;EAAEC,QAAQ,EAAE,eAAe;EAAEC,OAAO,EAAE,IAAI;EAAEC,OAAO,EAAE,IAAI;EAAEC,SAAS,EAAC;AAAC,CAAC,EAC7E;EAACJ,EAAE,EAAE,EAAE;EAAEC,QAAQ,EAAE,aAAa;EAAEC,OAAO,EAAE,IAAI;EAAEC,OAAO,EAAE,IAAI;EAAEC,SAAS,EAAC;AAAC,CAAC,EAC5E;EAACJ,EAAE,EAAE,EAAE;EAAEC,QAAQ,EAAE,aAAa;EAAEC,OAAO,EAAE,IAAI;EAAEC,OAAO,EAAE,IAAI;EAAEC,SAAS,EAAC;AAAC,CAAC,CAC7E;AACD,OAAO,MAAMC,YAAY,GAAG,SAAAA,CAAA,EAAkC;EAAA,IAAjCC,KAAK,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAGR,YAAY;EAAA,IAAEW,MAAM,GAAAH,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAE,SAAA;EAEvD,QAAQC,MAAM,CAACC,IAAI;IACjB,KAAK,gBAAgB;MACnB,IAAIC,QAAQ,GAAG,EAAE;MACjBF,MAAM,CAACG,OAAO,CAACC,OAAO,CAAC,CAACC,OAAO,EAAEC,KAAK,KACpCJ,QAAQ,CAACK,IAAI,CAAC;QAACjB,EAAE,EAAEgB,KAAK;QACVf,QAAQ,EAAEc,OAAO;QACjBb,OAAO,EAAE,KAAK;QACdC,OAAO,EAAE,KAAK;QACdC,SAAS,EAAE;MAAC,CAAC,CAC7B,CAAC;MACD,OAAOQ,QAAQ;IACf,KAAK,gBAAgB;MACnB,MAAM;QAAEM,MAAM;QAAEC;MAAO,CAAC,GAAGT,MAAM,CAACG,OAAO;;MAEzC;MACA,MAAMO,SAAS,GAAGd,KAAK,CAACe,GAAG,CAAC,CAACC,IAAI,EAAEN,KAAK,KAAK;QAC3C,IAAIA,KAAK,KAAKE,MAAM,EAAE;UACpB,OAAO;YAAE,GAAGI,IAAI;YAAEpB,OAAO,EAAE;UAAK,CAAC;QACnC;QACA,OAAOoB,IAAI;MACb,CAAC,CAAC;;MAEF;MACA,MAAMC,cAAc,GAAGH,SAAS,CAACI,MAAM,CAAC,CAACC,GAAG,EAAEH,IAAI,EAAEN,KAAK,KAAK;QAC5D,IAAIM,IAAI,CAACpB,OAAO,EAAEuB,GAAG,CAACR,IAAI,CAACD,KAAK,CAAC;QACjC,OAAOS,GAAG;MACZ,CAAC,EAAE,EAAE,CAAC;;MAEN;MACA,IAAIF,cAAc,CAACf,MAAM,KAAK,CAAC,EAAE;QAC/B,MAAMkB,KAAK,GAAGN,SAAS,CAACG,cAAc,CAAC,CAAC,CAAC,CAAC;QAC1C,MAAMI,KAAK,GAAGP,SAAS,CAACG,cAAc,CAAC,CAAC,CAAC,CAAC;;QAE1C;QACA,IAAIG,KAAK,CAACzB,QAAQ,KAAK0B,KAAK,CAAC1B,QAAQ,EAAE;UACrC;UACAmB,SAAS,CAACG,cAAc,CAAC,CAAC,CAAC,CAAC,GAAG;YAAE,GAAGG,KAAK;YAAEvB,OAAO,EAAE,IAAI;YAAEC,SAAS,EAAEe;UAAO,CAAC;UAC7EC,SAAS,CAACG,cAAc,CAAC,CAAC,CAAC,CAAC,GAAG;YAAE,GAAGI,KAAK;YAAExB,OAAO,EAAE,IAAI;YAAEC,SAAS,EAAEe;UAAO,CAAC;QAC/E;MACF;MAEA,OAAOC,SAAS;IAEpB,KAAK,kBAAkB;MACrB,OAAOd,KAAK,CAACe,GAAG,CAACC,IAAI,KAAK;QAAC,GAAGA,IAAI;QAAEpB,OAAO,EAAE;MAAK,CAAC,CAAC,CAAC;;IAEtD;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACI;MACE0B,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEvB,KAAK,CAAC;MACpC,OAAOA,KAAK;EAChB;AACF,CAAC;AAED,MAAMwB,SAAS,GAAG,CAChB,UAAU,EAAE,UAAU,EACtB,UAAU,EAAE,UAAU,EACtB,eAAe,EAAE,eAAe,EAChC,eAAe,EAAE,eAAe,EAChC,eAAe,EAAE,eAAe,EAChC,aAAa,EAAE,aAAa,CAC7B;AAED,MAAMC,WAAW,GAAGA,CAAA,KAAM;EACxB,IAAIC,KAAK,GAAG,EAAE;EACd,IAAIC,YAAY,GAAG,CAAC,GAAGH,SAAS,CAAC;EACjC,MAAMI,IAAI,GAAGD,YAAY,CAACzB,MAAM;EAChC,KAAK,IAAI2B,CAAC,GAAC,CAAC,EAAEA,CAAC,GAACD,IAAI,EAAEC,CAAC,EAAE,EAAE;IACzB,MAAMC,SAAS,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAACN,YAAY,CAACzB,MAAM,CAAC;IAC/DwB,KAAK,CAACf,IAAI,CAACgB,YAAY,CAACG,SAAS,CAAC,CAAC;IACnCH,YAAY,CAACO,MAAM,CAACJ,SAAS,EAAE,CAAC,CAAC;EACnC;EAEA,OAAOJ,KAAK;AACd,CAAC;;AAED;AACA,OAAO,MAAMS,QAAQ,GAAGA,CAAA,KAAM;EAC5B,MAAMT,KAAK,GAAGD,WAAW,CAAC,CAAC;EAC3B,OAAO;IACLpB,IAAI,EAAE,gBAAgB;IACtBE,OAAO,EAAEmB;EACX,CAAC;AACH,CAAC;AAED,OAAO,MAAMU,QAAQ,GAAGA,CAAC1C,EAAE,EAACmB,MAAM,KAAK;EACrC,OAAO;IACLR,IAAI,EAAE,gBAAgB;IACtBE,OAAO,EAAE;MAACb,EAAE;MAAEmB;IAAM;EACtB,CAAC;AACH,CAAC;AAED,OAAO,MAAMwB,UAAU,GAAIC,OAAO,IAAK;EACrChB,OAAO,CAACC,GAAG,CAAC,UAAU,CAAC;EACvB,OAAO;IACLlB,IAAI,EAAE;EACR,CAAC;AACH,CAAC;AACD,OAAO,MAAMkC,YAAY,GAAGA,CAAC1B,MAAM,EAAE2B,YAAY,KAAK;EACpD,OAAO;IACLnC,IAAI,EAAE,oBAAoB;IAC1BE,OAAO,EAAE;MAAEM,MAAM;MAAE2B;IAAa;EAClC,CAAC;AACH,CAAC;AACD;AACA,OAAO,MAAMC,WAAW,GAAGzC,KAAK,IAAIA,KAAK,CAAC0C,KAAK,CAAC3B,GAAG,CAACC,IAAI,KAAG;EAACtB,EAAE,EAAEsB,IAAI,CAACtB,EAAE;EAAEC,QAAQ,EAAEqB,IAAI,CAACrB;AAAQ,CAAC,CAAC,CAAC;AAEnG,OAAO,MAAMgD,gBAAgB,GAAG3C,KAAK,IAAIA,KAAK,CAAC0C,KAAK,CACnDE,MAAM,CAAC5B,IAAI,IAAIA,IAAI,CAACpB,OAAO,CAAC,CAC5BmB,GAAG,CAACC,IAAI,IAAIA,IAAI,CAACtB,EAAE,CAAC;AAErB,OAAO,MAAMmD,gBAAgB,GAAG7C,KAAK,IAAIA,KAAK,CAAC0C,KAAK,CACnDE,MAAM,CAAC5B,IAAI,IAAIA,IAAI,CAACnB,OAAO,CAAC,CAC5BkB,GAAG,CAACC,IAAI,IAAIA,IAAI,CAACtB,EAAE,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}